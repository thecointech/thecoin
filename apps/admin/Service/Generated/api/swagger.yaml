---
swagger: "2.0"
info:
  description: "TheCoin simple broker services.  This sample API is an example of\
    \ how to setup the simplest low-volume exchange, when combined with the included\
    \ server code, without external dependencies"
  version: "0.1.0"
  title: "THE Coin Broker Sample"
  contact:
    email: "stephen.taylor.dev@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "broker-cad.appspot.com"
tags:
- name: "Sell"
  description: "The Coin exchange service.  This API allows clients to exchange THESE\
    \ for CAD"
- name: "Transfer"
  description: "Request the broker to make a transfer on the clients behalf"
- name: "Secure"
  description: "Functions to help secure an account"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /status:
    get:
      tags:
      - "Status"
      summary: "Gets the operating status of the broker"
      description: "Returns info like brokers address, available balance, etc (?)"
      operationId: "status"
      parameters: []
      responses:
        200:
          description: "Server status"
          schema:
            $ref: "#/definitions/BrokerStatus"
        405:
          description: "Server Error"
      x-swagger-router-controller: "Status"
  /referrers:
    get:
      tags:
      - "Referrers"
      summary: "Gets the validity of the passed referrer"
      description: "Returns a boolean indicating whether the passed referrer is valid"
      operationId: "referrerValid"
      parameters:
      - name: "referrer"
        in: "query"
        description: "Referrers ID.  This ID must have been previously registered\
          \ with the system"
        required: true
        type: "string"
      responses:
        200:
          description: "Id Valid"
          schema:
            $ref: "#/definitions/BoolResponse"
        405:
          description: "Server Error"
      x-swagger-router-controller: "Referrers"
    post:
      tags:
      - "Referrers"
      summary: "Register the referral of new account"
      description: "Returns a boolean indicating whether the passed referrer is valid"
      operationId: "referralCreate"
      parameters:
      - in: "body"
        name: "referral"
        description: "Set referal for new account"
        required: true
        schema:
          $ref: "#/definitions/NewAccountReferal"
      responses:
        200:
          description: "Referral success"
          schema:
            $ref: "#/definitions/BoolResponse"
        405:
          description: "Server Error"
      x-swagger-router-controller: "Referrers"
  /exchange/sell/initiate:
    post:
      tags:
      - "Sell"
      summary: "Request coin sale"
      description: "Called by the client to exchange coin for CAD"
      operationId: "requestCoinSale"
      parameters:
      - in: "body"
        name: "request"
        description: "Signed sell order request"
        required: true
        schema:
          $ref: "#/definitions/SignedMessage"
      responses:
        200:
          description: "The response confirms to the user the order was accepted"
          schema:
            $ref: "#/definitions/SellResponse"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Sell"
  /exchange/sell/certified:
    post:
      tags:
      - "Sell"
      summary: "Request coin sale"
      description: "Called by the client to exchange coin for CAD using a certified\
        \ transfer"
      operationId: "certifiedCoinSale"
      parameters:
      - in: "body"
        name: "request"
        description: "Signed certified transfer to this brokers address"
        required: true
        schema:
          $ref: "#/definitions/CertifiedSale"
      responses:
        200:
          description: "The response confirms to the user the order has been processed"
          schema:
            $ref: "#/definitions/CertifiedTransferResponse"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Sell"
  /exchange/etransfer/code:
    put:
      tags:
      - "Buy"
      summary: "Coin e-Transfer secret answer"
      description: "A unique code for the requesting user to use as an answer to their\
        \ e-Transfer question"
      operationId: "eTransferCode"
      parameters:
      - in: "body"
        name: "request"
        description: "Signed certified transfer to this brokers address"
        required: true
        schema:
          $ref: "#/definitions/SignedMessage"
      responses:
        200:
          description: "The response confirms to the user the order has been processed"
          schema:
            $ref: "#/definitions/eTransferCodeResponse"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Buy"
  /bills/{user}:
    post:
      tags:
      - "Bill Payments"
      summary: "Trigger a Bill Payment"
      description: "Called by the client to pay a bill in CAD with coin via a certified\
        \ transfer"
      operationId: "certifiedBillPayment"
      parameters:
      - in: "body"
        name: "request"
        description: "Signed certified transfer to this brokers address"
        required: true
        schema:
          $ref: "#/definitions/CertifiedBillPayment"
      - name: "user"
        in: "path"
        description: "User address"
        required: true
        type: "string"
      responses:
        200:
          description: "The response confirms to the user the order has been processed"
          schema:
            $ref: "#/definitions/CertifiedTransferResponse"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "BillPayments"
  /certifiedTransfer:
    post:
      tags:
      - "Transfer"
      summary: "Request Transfer from->to"
      description: "A client may request that the Broker initiate a transfer from\
        \ their account to another.  The transfer includes a fee paid to the broker\
        \ to cover the cost of the transfer.  This allows a user to operate on the\
        \ Ethereum blockchain without requiring their own ether"
      operationId: "makeCertifiedTransfer"
      parameters:
      - in: "body"
        name: "request"
        description: "A request appropriately filled out and signed as described in\
          \ the comments"
        required: true
        schema:
          $ref: "#/definitions/CertifiedTransferRequest"
      responses:
        200:
          description: "The response confirms to the user the order transfer is valid\
            \ and has been initiated"
          schema:
            $ref: "#/definitions/CertifiedTransferResponse"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Transfer"
  /secure/google:
    get:
      tags:
      - "Secure"
      summary: "Get the authorization URL to redirect the user to"
      operationId: "googleAuthUrl"
      parameters: []
      responses:
        200:
          description: "Google authorization URL"
          schema:
            $ref: "#/definitions/GoogleAuthUrl"
      x-swagger-router-controller: "Secure"
  /secure/google/list:
    put:
      tags:
      - "Secure"
      summary: "Get the listing of available accounts"
      operationId: "googleList"
      parameters:
      - in: "body"
        name: "token"
        required: true
        schema:
          $ref: "#/definitions/GoogleToken"
      responses:
        200:
          description: "Account successfully stored"
          schema:
            $ref: "#/definitions/GoogleListResult"
        405:
          description: "Permission Denied"
      x-swagger-router-controller: "Secure"
  /secure/google/put:
    put:
      tags:
      - "Secure"
      summary: "Store on google drive"
      operationId: "googlePut"
      parameters:
      - in: "body"
        name: "uploadPacket"
        required: true
        schema:
          $ref: "#/definitions/GooglePutRequest"
      responses:
        200:
          description: "Account successfully stored"
          schema:
            $ref: "#/definitions/BoolResponse"
        405:
          description: "Permission Denied"
      x-swagger-router-controller: "Secure"
  /secure/google/get:
    put:
      tags:
      - "Secure"
      summary: "Retrieve previously-stored file from google drive"
      operationId: "googleRetrieve"
      parameters:
      - in: "body"
        name: "token"
        required: true
        schema:
          $ref: "#/definitions/GoogleToken"
      responses:
        200:
          description: "Account successfully stored"
          schema:
            $ref: "#/definitions/GoogleGetResult"
        405:
          description: "Permission Denied"
      x-swagger-router-controller: "Secure"
  /newsletter/signup:
    put:
      tags:
      - "Newsletter"
      summary: "Register an email address for our newsletter."
      operationId: "newsletterSignup"
      parameters:
      - in: "body"
        name: "details"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionDetails"
      responses:
        200:
          description: "Email successfully registered"
          schema:
            $ref: "#/definitions/BoolResponse"
        500:
          description: "Server Error"
      x-swagger-router-controller: "Newsletter"
  /newsletter/confirm:
    put:
      tags:
      - "Newsletter"
      summary: "Confirm email subscription."
      operationId: "newsletterConfirm"
      parameters:
      - in: "body"
        name: "details"
        required: true
        schema:
          $ref: "#/definitions/SubscriptionDetails"
      responses:
        200:
          description: "If found, returns new details merged with existing"
          schema:
            $ref: "#/definitions/SubscriptionDetails"
        400:
          description: "Not Found"
        500:
          description: "Server Error"
      x-swagger-router-controller: "Newsletter"
  /newsletter/details:
    get:
      tags:
      - "Newsletter"
      summary: "Get subscription details."
      operationId: "newsletterDetails"
      parameters:
      - name: "id"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "If found, returns subscription details"
          schema:
            $ref: "#/definitions/SubscriptionDetails"
        400:
          description: "Not Found"
        500:
          description: "Server Error"
      x-swagger-router-controller: "Newsletter"
  /newsletter/unsubscribe:
    get:
      tags:
      - "Newsletter"
      summary: "Unsubscribe an email address from our newsletter."
      operationId: "newsletterUnsubscribe"
      parameters:
      - name: "id"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Email successfully registered"
          schema:
            $ref: "#/definitions/BoolResponse"
        400:
          description: "Not Found"
        500:
          description: "Server Error"
      x-swagger-router-controller: "Newsletter"
definitions:
  SignedPurchaseRequest:
    required:
    - "cadAmount"
    - "email"
    - "signature"
    - "timestamp"
    properties:
      timestamp:
        type: "integer"
      email:
        type: "string"
      cadAmount:
        type: "number"
      signature:
        type: "string"
  SignedPurchaseConfirm:
    required:
    - "signature"
    - "timestamp"
    properties:
      timestamp:
        type: "integer"
      signature:
        type: "string"
  PurchaseComplete:
    required:
    - "cadAmount"
    - "cadRate"
    - "coinAmount"
    - "coinRate"
    - "timestamp"
    - "txHash"
    properties:
      timestamp:
        type: "integer"
      cadAmount:
        type: "number"
      coinAmount:
        type: "integer"
      coinRate:
        type: "number"
      cadRate:
        type: "number"
      txHash:
        type: "string"
  PurchaseResponse:
    required:
    - "orderId"
    properties:
      orderId:
        type: "string"
  PurchaseIds:
    type: "array"
    items:
      type: "string"
  PurchaseState:
    properties:
      request:
        $ref: "#/definitions/SignedPurchaseRequest"
      confirm:
        $ref: "#/definitions/SignedPurchaseConfirm"
      complete:
        $ref: "#/definitions/PurchaseComplete"
  SellRequest:
    required:
    - "email"
    - "txHash"
    properties:
      email:
        type: "string"
      txHash:
        type: "string"
      blockNumber:
        type: "integer"
  SellComplete:
    required:
    - "cadAmount"
    - "cadRate"
    - "coinAmount"
    - "coinRate"
    - "timestamp"
    properties:
      timestamp:
        type: "integer"
      cadAmount:
        type: "number"
      coinAmount:
        type: "integer"
      coinRate:
        type: "number"
      cadRate:
        type: "number"
  SellResponse:
    required:
    - "orderId"
    properties:
      orderId:
        type: "string"
    example:
      orderId: "orderId"
  SignedMessage:
    required:
    - "message"
    - "signature"
    properties:
      message:
        type: "string"
      signature:
        type: "string"
    example:
      signature: "signature"
      message: "message"
  CertifiedTransferRequest:
    required:
    - "fee"
    - "from"
    - "signature"
    - "timestamp"
    - "to"
    - "value"
    properties:
      from:
        type: "string"
      to:
        type: "string"
      value:
        type: "integer"
      fee:
        type: "integer"
      timestamp:
        type: "integer"
      signature:
        type: "string"
    example:
      signature: "signature"
      fee: 6
      from: "from"
      to: "to"
      value: 0
      timestamp: 1
  CertifiedTransferResponse:
    required:
    - "message"
    - "txHash"
    properties:
      message:
        type: "string"
      txHash:
        type: "string"
    example:
      message: "message"
      txHash: "txHash"
  eTransferCodeResponse:
    properties:
      code:
        type: "string"
      error:
        type: "string"
    example:
      code: "code"
      error: "error"
  ETransferPacket:
    required:
    - "email"
    - "secret"
    properties:
      email:
        type: "string"
      secret:
        type: "string"
      message:
        type: "string"
  CertifiedSale:
    required:
    - "signature"
    - "transfer"
    properties:
      transfer:
        $ref: "#/definitions/CertifiedTransferRequest"
      encryptedETransfer:
        type: "string"
      signature:
        type: "string"
    example:
      transfer:
        signature: "signature"
        fee: 6
        from: "from"
        to: "to"
        value: 0
        timestamp: 1
      encryptedETransfer: "encryptedETransfer"
      signature: "signature"
  BillPayeePacket:
    properties:
      payee:
        type: "string"
      accountNumber:
        type: "string"
  EncryptedPacket:
    required:
    - "encryptedPacket"
    - "version"
    properties:
      encryptedPacket:
        type: "string"
      name:
        type: "string"
      version:
        type: "string"
    example:
      name: "name"
      encryptedPacket: "encryptedPacket"
      version: "version"
  CertifiedBillPayment:
    required:
    - "encryptedPayee"
    - "signature"
    - "transfer"
    properties:
      transfer:
        $ref: "#/definitions/CertifiedTransferRequest"
      encryptedPayee:
        $ref: "#/definitions/EncryptedPacket"
      signature:
        type: "string"
    example:
      encryptedPayee:
        name: "name"
        encryptedPacket: "encryptedPacket"
        version: "version"
      transfer:
        signature: "signature"
        fee: 6
        from: "from"
        to: "to"
        value: 0
        timestamp: 1
      signature: "signature"
  BrokerStatus:
    required:
    - "address"
    - "certifiedFee"
    properties:
      address:
        type: "string"
      certifiedFee:
        type: "integer"
    example:
      address: "address"
      certifiedFee: 0
  NewAccountReferal:
    required:
    - "newAccount"
    - "referrerId"
    properties:
      referrerId:
        type: "string"
      newAccount:
        type: "string"
    example:
      referrerId: "referrerId"
      newAccount: "newAccount"
  BoolResponse:
    type: "boolean"
    properties:
      success:
        type: "boolean"
    title: "A bool that to be returned indicating success/failure"
    example:
      success: true
  GoogleAuthUrl:
    required:
    - "url"
    properties:
      url:
        type: "string"
    example:
      url: "url"
  GoogleToken:
    required:
    - "token"
    properties:
      token:
        type: "string"
    example:
      token: "token"
  GooglePutRequest:
    required:
    - "token"
    - "wallet"
    - "walletName"
    properties:
      token:
        $ref: "#/definitions/GoogleToken"
      wallet:
        type: "string"
      walletName:
        type: "string"
    example:
      wallet: "wallet"
      walletName: "walletName"
      token:
        token: "token"
  GoogleFileIdent:
    required:
    - "id"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
    example:
      name: "name"
      id: "id"
      type: "type"
  GoogleWalletItem:
    required:
    - "id"
    properties:
      id:
        $ref: "#/definitions/GoogleFileIdent"
      wallet:
        type: "string"
    example:
      wallet: "wallet"
      id:
        name: "name"
        id: "id"
        type: "type"
  GoogleListResult:
    required:
    - "wallets"
    properties:
      wallets:
        type: "array"
        items:
          $ref: "#/definitions/GoogleFileIdent"
    example:
      wallets:
      - name: "name"
        id: "id"
        type: "type"
      - name: "name"
        id: "id"
        type: "type"
  GoogleGetResult:
    required:
    - "wallets"
    properties:
      wallets:
        type: "array"
        items:
          $ref: "#/definitions/GoogleWalletItem"
    example:
      wallets:
      - wallet: "wallet"
        id:
          name: "name"
          id: "id"
          type: "type"
      - wallet: "wallet"
        id:
          name: "name"
          id: "id"
          type: "type"
  SubscriptionDetails:
    properties:
      id:
        type: "string"
      email:
        type: "string"
      confirmed:
        type: "boolean"
      firstName:
        type: "string"
      lastName:
        type: "string"
      country:
        type: "string"
      city:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      country: "country"
      city: "city"
      id: "id"
      confirmed: true
      email: "email"
