/**
 * THE Coin Broker Sample
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertifiedTransferRequest from '../model/CertifiedTransferRequest';
import CertifiedTransferResponse from '../model/CertifiedTransferResponse';

/**
* Transfer service.
* @module api/TransferApi
* @version 0.1.0
*/
export default class TransferApi {

    /**
    * Constructs a new TransferApi. 
    * @alias module:api/TransferApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Request Transfer from-&gt;to
     * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
     * @param {module:model/CertifiedTransferRequest} certifiedTransferRequest A request appropriately filled out and signed as described in the comments
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CertifiedTransferResponse} and HTTP response
     */
    makeCertifiedTransferWithHttpInfo(certifiedTransferRequest) {
      let postBody = certifiedTransferRequest;

      // verify the required parameter 'certifiedTransferRequest' is set
      if (certifiedTransferRequest === undefined || certifiedTransferRequest === null) {
        throw new Error("Missing the required parameter 'certifiedTransferRequest' when calling makeCertifiedTransfer");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertifiedTransferResponse;

      return this.apiClient.callApi(
        '/certifiedTransfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Request Transfer from-&gt;to
     * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
     * @param {module:model/CertifiedTransferRequest} certifiedTransferRequest A request appropriately filled out and signed as described in the comments
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CertifiedTransferResponse}
     */
    makeCertifiedTransfer(certifiedTransferRequest) {
      return this.makeCertifiedTransferWithHttpInfo(certifiedTransferRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
