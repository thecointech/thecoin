/**
 * THE Coin Broker Sample
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OpenPurchases from '../model/OpenPurchases';
import PurchaseResponse from '../model/PurchaseResponse';
import SellResponse from '../model/SellResponse';
import SignedMessage from '../model/SignedMessage';
import SignedPurchaseConfirm from '../model/SignedPurchaseConfirm';
import SignedPurchaseRequest from '../model/SignedPurchaseRequest';

/**
* Exchange service.
* @module api/ExchangeApi
* @version 0.1.0
*/
export default class ExchangeApi {

    /**
    * Constructs a new ExchangeApi. 
    * @alias module:api/ExchangeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Mark buy order complete
     * Called by the broker to confirm CAD was deposited and coin disbursed
     * @param {module:model/SignedMessage} signedMessage Signed PurchaseComplete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseResponse} and HTTP response
     */
    completeCoinPurchaseWithHttpInfo(signedMessage) {
      let postBody = signedMessage;

      // verify the required parameter 'signedMessage' is set
      if (signedMessage === undefined || signedMessage === null) {
        throw new Error("Missing the required parameter 'signedMessage' when calling completeCoinPurchase");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseResponse;

      return this.apiClient.callApi(
        '/exchange/buy/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Mark buy order complete
     * Called by the broker to confirm CAD was deposited and coin disbursed
     * @param {module:model/SignedMessage} signedMessage Signed PurchaseComplete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseResponse}
     */
    completeCoinPurchase(signedMessage) {
      return this.completeCoinPurchaseWithHttpInfo(signedMessage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark coin sale complete
     * Called by the client to exchange coin for CAD
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellResponse} and HTTP response
     */
    completeCoinSaleWithHttpInfo(signedMessage) {
      let postBody = signedMessage;

      // verify the required parameter 'signedMessage' is set
      if (signedMessage === undefined || signedMessage === null) {
        throw new Error("Missing the required parameter 'signedMessage' when calling completeCoinSale");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellResponse;

      return this.apiClient.callApi(
        '/exchange/sell/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Mark coin sale complete
     * Called by the client to exchange coin for CAD
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SellResponse}
     */
    completeCoinSale(signedMessage) {
      return this.completeCoinSaleWithHttpInfo(signedMessage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Confirm order opened
     * Called by the Broker once e-transfer initiated
     * @param {module:model/SignedPurchaseConfirm} signedPurchaseConfirm Signed buy order confirm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseResponse} and HTTP response
     */
    confirmCoinPurchaseWithHttpInfo(signedPurchaseConfirm) {
      let postBody = signedPurchaseConfirm;

      // verify the required parameter 'signedPurchaseConfirm' is set
      if (signedPurchaseConfirm === undefined || signedPurchaseConfirm === null) {
        throw new Error("Missing the required parameter 'signedPurchaseConfirm' when calling confirmCoinPurchase");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseResponse;

      return this.apiClient.callApi(
        '/exchange/buy/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Confirm order opened
     * Called by the Broker once e-transfer initiated
     * @param {module:model/SignedPurchaseConfirm} signedPurchaseConfirm Signed buy order confirm
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseResponse}
     */
    confirmCoinPurchase(signedPurchaseConfirm) {
      return this.confirmCoinPurchaseWithHttpInfo(signedPurchaseConfirm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query open buy orders
     * Called by the broker to retrieve all open buy orders.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OpenPurchases} and HTTP response
     */
    queryCoinPurchasesWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenPurchases;

      return this.apiClient.callApi(
        '/exchange/buy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Query open buy orders
     * Called by the broker to retrieve all open buy orders.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OpenPurchases}
     */
    queryCoinPurchases() {
      return this.queryCoinPurchasesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request to buy Coin
     * Called by the client to exchange CAD for coin
     * @param {module:model/SignedPurchaseRequest} signedPurchaseRequest Signed buy order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PurchaseResponse} and HTTP response
     */
    requestCoinPurchaseWithHttpInfo(signedPurchaseRequest) {
      let postBody = signedPurchaseRequest;

      // verify the required parameter 'signedPurchaseRequest' is set
      if (signedPurchaseRequest === undefined || signedPurchaseRequest === null) {
        throw new Error("Missing the required parameter 'signedPurchaseRequest' when calling requestCoinPurchase");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseResponse;

      return this.apiClient.callApi(
        '/exchange/buy/initiate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Request to buy Coin
     * Called by the client to exchange CAD for coin
     * @param {module:model/SignedPurchaseRequest} signedPurchaseRequest Signed buy order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PurchaseResponse}
     */
    requestCoinPurchase(signedPurchaseRequest) {
      return this.requestCoinPurchaseWithHttpInfo(signedPurchaseRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request coin sale
     * Called by the client to exchange coin for CAD
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellResponse} and HTTP response
     */
    requestCoinSaleWithHttpInfo(signedMessage) {
      let postBody = signedMessage;

      // verify the required parameter 'signedMessage' is set
      if (signedMessage === undefined || signedMessage === null) {
        throw new Error("Missing the required parameter 'signedMessage' when calling requestCoinSale");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellResponse;

      return this.apiClient.callApi(
        '/exchange/sell/initiate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Request coin sale
     * Called by the client to exchange coin for CAD
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SellResponse}
     */
    requestCoinSale(signedMessage) {
      return this.requestCoinSaleWithHttpInfo(signedMessage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
