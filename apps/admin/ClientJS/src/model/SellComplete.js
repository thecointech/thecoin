/**
 * THE Coin Broker Sample
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SellComplete model module.
 * @module model/SellComplete
 * @version 0.1.0
 */
class SellComplete {
    /**
     * Constructs a new <code>SellComplete</code>.
     * @alias module:model/SellComplete
     * @param timestamp {Number} 
     * @param cadAmount {Number} 
     * @param coinAmount {Number} 
     * @param coinRate {Number} 
     * @param cadRate {Number} 
     */
    constructor(timestamp, cadAmount, coinAmount, coinRate, cadRate) { 
        
        SellComplete.initialize(this, timestamp, cadAmount, coinAmount, coinRate, cadRate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timestamp, cadAmount, coinAmount, coinRate, cadRate) { 
        obj['timestamp'] = timestamp;
        obj['cadAmount'] = cadAmount;
        obj['coinAmount'] = coinAmount;
        obj['coinRate'] = coinRate;
        obj['cadRate'] = cadRate;
    }

    /**
     * Constructs a <code>SellComplete</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SellComplete} obj Optional instance to populate.
     * @return {module:model/SellComplete} The populated <code>SellComplete</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SellComplete();

            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('cadAmount')) {
                obj['cadAmount'] = ApiClient.convertToType(data['cadAmount'], 'Number');
            }
            if (data.hasOwnProperty('coinAmount')) {
                obj['coinAmount'] = ApiClient.convertToType(data['coinAmount'], 'Number');
            }
            if (data.hasOwnProperty('coinRate')) {
                obj['coinRate'] = ApiClient.convertToType(data['coinRate'], 'Number');
            }
            if (data.hasOwnProperty('cadRate')) {
                obj['cadRate'] = ApiClient.convertToType(data['cadRate'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} timestamp
 */
SellComplete.prototype['timestamp'] = undefined;

/**
 * @member {Number} cadAmount
 */
SellComplete.prototype['cadAmount'] = undefined;

/**
 * @member {Number} coinAmount
 */
SellComplete.prototype['coinAmount'] = undefined;

/**
 * @member {Number} coinRate
 */
SellComplete.prototype['coinRate'] = undefined;

/**
 * @member {Number} cadRate
 */
SellComplete.prototype['cadRate'] = undefined;






export default SellComplete;

