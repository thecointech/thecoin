/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * THE Coin Broker Sample
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://the-broker-cad.appspot.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface BillPayeePacket
 */
export interface BillPayeePacket {
    /**
     * 
     * @type {string}
     * @memberof BillPayeePacket
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof BillPayeePacket
     */
    accountNumber?: string;
}

/**
 * 
 * @export
 * @interface BrokerStatus
 */
export interface BrokerStatus {
    /**
     * 
     * @type {string}
     * @memberof BrokerStatus
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof BrokerStatus
     */
    certifiedFee: number;
}

/**
 * 
 * @export
 * @interface CertifiedBillPayment
 */
export interface CertifiedBillPayment {
    /**
     * 
     * @type {CertifiedTransferRequest}
     * @memberof CertifiedBillPayment
     */
    transfer: CertifiedTransferRequest;
    /**
     * 
     * @type {EncryptedPacket}
     * @memberof CertifiedBillPayment
     */
    encryptedPayee: EncryptedPacket;
    /**
     * 
     * @type {string}
     * @memberof CertifiedBillPayment
     */
    signature: string;
}

/**
 * 
 * @export
 * @interface CertifiedSale
 */
export interface CertifiedSale {
    /**
     * 
     * @type {CertifiedTransferRequest}
     * @memberof CertifiedSale
     */
    transfer: CertifiedTransferRequest;
    /**
     * 
     * @type {string}
     * @memberof CertifiedSale
     */
    clientEmail: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedSale
     */
    signature: string;
}

/**
 * 
 * @export
 * @interface CertifiedTransferRequest
 */
export interface CertifiedTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    to: string;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    value: number;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    fee: number;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    signature: string;
}

/**
 * 
 * @export
 * @interface CertifiedTransferResponse
 */
export interface CertifiedTransferResponse {
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferResponse
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferResponse
     */
    txHash: string;
}

/**
 * 
 * @export
 * @interface EncryptedPacket
 */
export interface EncryptedPacket {
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    encryptedPacket: string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    version: string;
}

/**
 * 
 * @export
 * @interface GoogleAuthUrl
 */
export interface GoogleAuthUrl {
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthUrl
     */
    url: string;
}

/**
 * 
 * @export
 * @interface GoogleGetRequest
 */
export interface GoogleGetRequest {
    /**
     * 
     * @type {string}
     * @memberof GoogleGetRequest
     */
    wallet: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleGetRequest
     */
    walletName: string;
}

/**
 * 
 * @export
 * @interface GoogleGetResult
 */
export interface GoogleGetResult {
    /**
     * 
     * @type {string}
     * @memberof GoogleGetResult
     */
    wallet: string;
}

/**
 * 
 * @export
 * @interface GoogleListResult
 */
export interface GoogleListResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof GoogleListResult
     */
    accounts: Array<string>;
}

/**
 * 
 * @export
 * @interface GooglePutRequest
 */
export interface GooglePutRequest {
    /**
     * 
     * @type {GoogleToken}
     * @memberof GooglePutRequest
     */
    token: GoogleToken;
    /**
     * 
     * @type {string}
     * @memberof GooglePutRequest
     */
    wallet: string;
    /**
     * 
     * @type {string}
     * @memberof GooglePutRequest
     */
    walletName: string;
}

/**
 * 
 * @export
 * @interface GoogleToken
 */
export interface GoogleToken {
    /**
     * 
     * @type {string}
     * @memberof GoogleToken
     */
    token: string;
}

/**
 * 
 * @export
 * @interface NewAccountReferal
 */
export interface NewAccountReferal {
    /**
     * 
     * @type {string}
     * @memberof NewAccountReferal
     */
    referrerId: string;
    /**
     * 
     * @type {string}
     * @memberof NewAccountReferal
     */
    newAccount: string;
}

/**
 * 
 * @export
 * @interface PurchaseComplete
 */
export interface PurchaseComplete {
    /**
     * 
     * @type {number}
     * @memberof PurchaseComplete
     */
    timestamp: number;
    /**
     * 
     * @type {number}
     * @memberof PurchaseComplete
     */
    cadAmount: number;
    /**
     * 
     * @type {number}
     * @memberof PurchaseComplete
     */
    coinAmount: number;
    /**
     * 
     * @type {number}
     * @memberof PurchaseComplete
     */
    coinRate: number;
    /**
     * 
     * @type {number}
     * @memberof PurchaseComplete
     */
    cadRate: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseComplete
     */
    txHash: string;
}

/**
 * 
 * @export
 * @interface PurchaseIds
 */
export interface PurchaseIds extends Array<string> {
}

/**
 * 
 * @export
 * @interface PurchaseResponse
 */
export interface PurchaseResponse {
    /**
     * 
     * @type {string}
     * @memberof PurchaseResponse
     */
    orderId: string;
}

/**
 * 
 * @export
 * @interface PurchaseState
 */
export interface PurchaseState {
    /**
     * 
     * @type {SignedPurchaseRequest}
     * @memberof PurchaseState
     */
    request?: SignedPurchaseRequest;
    /**
     * 
     * @type {SignedPurchaseConfirm}
     * @memberof PurchaseState
     */
    confirm?: SignedPurchaseConfirm;
    /**
     * 
     * @type {PurchaseComplete}
     * @memberof PurchaseState
     */
    complete?: PurchaseComplete;
}

/**
 * 
 * @export
 * @interface SellComplete
 */
export interface SellComplete {
    /**
     * 
     * @type {number}
     * @memberof SellComplete
     */
    timestamp: number;
    /**
     * 
     * @type {number}
     * @memberof SellComplete
     */
    cadAmount: number;
    /**
     * 
     * @type {number}
     * @memberof SellComplete
     */
    coinAmount: number;
    /**
     * 
     * @type {number}
     * @memberof SellComplete
     */
    coinRate: number;
    /**
     * 
     * @type {number}
     * @memberof SellComplete
     */
    cadRate: number;
}

/**
 * 
 * @export
 * @interface SellRequest
 */
export interface SellRequest {
    /**
     * 
     * @type {string}
     * @memberof SellRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof SellRequest
     */
    txHash: string;
    /**
     * 
     * @type {number}
     * @memberof SellRequest
     */
    blockNumber?: number;
}

/**
 * 
 * @export
 * @interface SellResponse
 */
export interface SellResponse {
    /**
     * 
     * @type {string}
     * @memberof SellResponse
     */
    orderId: string;
}

/**
 * 
 * @export
 * @interface SignedMessage
 */
export interface SignedMessage {
    /**
     * 
     * @type {string}
     * @memberof SignedMessage
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof SignedMessage
     */
    signature: string;
}

/**
 * 
 * @export
 * @interface SignedPurchaseConfirm
 */
export interface SignedPurchaseConfirm {
    /**
     * 
     * @type {number}
     * @memberof SignedPurchaseConfirm
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof SignedPurchaseConfirm
     */
    signature: string;
}

/**
 * 
 * @export
 * @interface SignedPurchaseRequest
 */
export interface SignedPurchaseRequest {
    /**
     * 
     * @type {number}
     * @memberof SignedPurchaseRequest
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof SignedPurchaseRequest
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof SignedPurchaseRequest
     */
    cadAmount: number;
    /**
     * 
     * @type {string}
     * @memberof SignedPurchaseRequest
     */
    signature: string;
}


/**
 * BillPaymentsApi - fetch parameter creator
 * @export
 */
export const BillPaymentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Called by the client to pay a bill in CAD with coin via a certified transfer
         * @summary Trigger a Bill Payment
         * @param {string} user User address
         * @param {CertifiedBillPayment} certifiedBillPayment Signed certified transfer to this brokers address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certifiedBillPayment(user: string, certifiedBillPayment: CertifiedBillPayment, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling certifiedBillPayment.');
            }
            // verify required parameter 'certifiedBillPayment' is not null or undefined
            if (certifiedBillPayment === null || certifiedBillPayment === undefined) {
                throw new RequiredError('certifiedBillPayment','Required parameter certifiedBillPayment was null or undefined when calling certifiedBillPayment.');
            }
            const localVarPath = `/bills/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CertifiedBillPayment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(certifiedBillPayment || {}) : (certifiedBillPayment || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillPaymentsApi - functional programming interface
 * @export
 */
export const BillPaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Called by the client to pay a bill in CAD with coin via a certified transfer
         * @summary Trigger a Bill Payment
         * @param {string} user User address
         * @param {CertifiedBillPayment} certifiedBillPayment Signed certified transfer to this brokers address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certifiedBillPayment(user: string, certifiedBillPayment: CertifiedBillPayment, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CertifiedTransferResponse> {
            const localVarFetchArgs = BillPaymentsApiFetchParamCreator(configuration).certifiedBillPayment(user, certifiedBillPayment, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BillPaymentsApi - factory interface
 * @export
 */
export const BillPaymentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Called by the client to pay a bill in CAD with coin via a certified transfer
         * @summary Trigger a Bill Payment
         * @param {string} user User address
         * @param {CertifiedBillPayment} certifiedBillPayment Signed certified transfer to this brokers address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certifiedBillPayment(user: string, certifiedBillPayment: CertifiedBillPayment, options?: any) {
            return BillPaymentsApiFp(configuration).certifiedBillPayment(user, certifiedBillPayment, options)(fetch, basePath);
        },
    };
};

/**
 * BillPaymentsApi - object-oriented interface
 * @export
 * @class BillPaymentsApi
 * @extends {BaseAPI}
 */
export class BillPaymentsApi extends BaseAPI {
    /**
     * Called by the client to pay a bill in CAD with coin via a certified transfer
     * @summary Trigger a Bill Payment
     * @param {string} user User address
     * @param {CertifiedBillPayment} certifiedBillPayment Signed certified transfer to this brokers address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillPaymentsApi
     */
    public certifiedBillPayment(user: string, certifiedBillPayment: CertifiedBillPayment, options?: any) {
        return BillPaymentsApiFp(this.configuration).certifiedBillPayment(user, certifiedBillPayment, options)(this.fetch, this.basePath);
    }

}

/**
 * PurchaseApi - fetch parameter creator
 * @export
 */
export const PurchaseApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Called by the broker to confirm CAD was deposited and coin disbursed
         * @summary Mark buy order complete
         * @param {string} user User address
         * @param {number} id Id of purchase order to complete
         * @param {SignedMessage} signedMessage Signed PurchaseComplete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeCoinPurchase(user: string, id: number, signedMessage: SignedMessage, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling completeCoinPurchase.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling completeCoinPurchase.');
            }
            // verify required parameter 'signedMessage' is not null or undefined
            if (signedMessage === null || signedMessage === undefined) {
                throw new RequiredError('signedMessage','Required parameter signedMessage was null or undefined when calling completeCoinPurchase.');
            }
            const localVarPath = `/exchange/buy/{user}/{id}/complete`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignedMessage" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(signedMessage || {}) : (signedMessage || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by the Broker once e-transfer initiated
         * @summary Confirm order opened
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {SignedPurchaseConfirm} signedPurchaseConfirm Signed buy order confirm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCoinPurchase(user: string, id: number, signedPurchaseConfirm: SignedPurchaseConfirm, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling confirmCoinPurchase.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling confirmCoinPurchase.');
            }
            // verify required parameter 'signedPurchaseConfirm' is not null or undefined
            if (signedPurchaseConfirm === null || signedPurchaseConfirm === undefined) {
                throw new RequiredError('signedPurchaseConfirm','Required parameter signedPurchaseConfirm was null or undefined when calling confirmCoinPurchase.');
            }
            const localVarPath = `/exchange/buy/{user}/{id}/confirm`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignedPurchaseConfirm" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(signedPurchaseConfirm || {}) : (signedPurchaseConfirm || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by the broker to retrieve all open buy orders.
         * @summary Query open buy orders
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {string} [state] Numerical state identifier.  If not present, all states will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCoinPurchase(user: string, id: number, state?: string, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling queryCoinPurchase.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling queryCoinPurchase.');
            }
            const localVarPath = `/exchange/buy/{user}/{id}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by the broker to retrieve all buy orders ID's in the passed state.
         * @summary Query buy order id's
         * @param {number} state Numerical state identifier.  Returned array will be all of type state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCoinPurchasesIds(state: number, options: any = {}): FetchArgs {
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling queryCoinPurchasesIds.');
            }
            const localVarPath = `/exchange/buy/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by the client to exchange CAD for coin
         * @summary Request to buy Coin
         * @param {SignedPurchaseRequest} signedPurchaseRequest Signed buy order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCoinPurchase(signedPurchaseRequest: SignedPurchaseRequest, options: any = {}): FetchArgs {
            // verify required parameter 'signedPurchaseRequest' is not null or undefined
            if (signedPurchaseRequest === null || signedPurchaseRequest === undefined) {
                throw new RequiredError('signedPurchaseRequest','Required parameter signedPurchaseRequest was null or undefined when calling requestCoinPurchase.');
            }
            const localVarPath = `/exchange/buy/initiate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignedPurchaseRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(signedPurchaseRequest || {}) : (signedPurchaseRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseApi - functional programming interface
 * @export
 */
export const PurchaseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Called by the broker to confirm CAD was deposited and coin disbursed
         * @summary Mark buy order complete
         * @param {string} user User address
         * @param {number} id Id of purchase order to complete
         * @param {SignedMessage} signedMessage Signed PurchaseComplete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeCoinPurchase(user: string, id: number, signedMessage: SignedMessage, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseResponse> {
            const localVarFetchArgs = PurchaseApiFetchParamCreator(configuration).completeCoinPurchase(user, id, signedMessage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by the Broker once e-transfer initiated
         * @summary Confirm order opened
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {SignedPurchaseConfirm} signedPurchaseConfirm Signed buy order confirm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCoinPurchase(user: string, id: number, signedPurchaseConfirm: SignedPurchaseConfirm, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseResponse> {
            const localVarFetchArgs = PurchaseApiFetchParamCreator(configuration).confirmCoinPurchase(user, id, signedPurchaseConfirm, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by the broker to retrieve all open buy orders.
         * @summary Query open buy orders
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {string} [state] Numerical state identifier.  If not present, all states will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCoinPurchase(user: string, id: number, state?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseState> {
            const localVarFetchArgs = PurchaseApiFetchParamCreator(configuration).queryCoinPurchase(user, id, state, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by the broker to retrieve all buy orders ID's in the passed state.
         * @summary Query buy order id's
         * @param {number} state Numerical state identifier.  Returned array will be all of type state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCoinPurchasesIds(state: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseIds> {
            const localVarFetchArgs = PurchaseApiFetchParamCreator(configuration).queryCoinPurchasesIds(state, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by the client to exchange CAD for coin
         * @summary Request to buy Coin
         * @param {SignedPurchaseRequest} signedPurchaseRequest Signed buy order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCoinPurchase(signedPurchaseRequest: SignedPurchaseRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PurchaseResponse> {
            const localVarFetchArgs = PurchaseApiFetchParamCreator(configuration).requestCoinPurchase(signedPurchaseRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PurchaseApi - factory interface
 * @export
 */
export const PurchaseApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Called by the broker to confirm CAD was deposited and coin disbursed
         * @summary Mark buy order complete
         * @param {string} user User address
         * @param {number} id Id of purchase order to complete
         * @param {SignedMessage} signedMessage Signed PurchaseComplete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeCoinPurchase(user: string, id: number, signedMessage: SignedMessage, options?: any) {
            return PurchaseApiFp(configuration).completeCoinPurchase(user, id, signedMessage, options)(fetch, basePath);
        },
        /**
         * Called by the Broker once e-transfer initiated
         * @summary Confirm order opened
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {SignedPurchaseConfirm} signedPurchaseConfirm Signed buy order confirm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCoinPurchase(user: string, id: number, signedPurchaseConfirm: SignedPurchaseConfirm, options?: any) {
            return PurchaseApiFp(configuration).confirmCoinPurchase(user, id, signedPurchaseConfirm, options)(fetch, basePath);
        },
        /**
         * Called by the broker to retrieve all open buy orders.
         * @summary Query open buy orders
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {string} [state] Numerical state identifier.  If not present, all states will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCoinPurchase(user: string, id: number, state?: string, options?: any) {
            return PurchaseApiFp(configuration).queryCoinPurchase(user, id, state, options)(fetch, basePath);
        },
        /**
         * Called by the broker to retrieve all buy orders ID's in the passed state.
         * @summary Query buy order id's
         * @param {number} state Numerical state identifier.  Returned array will be all of type state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCoinPurchasesIds(state: number, options?: any) {
            return PurchaseApiFp(configuration).queryCoinPurchasesIds(state, options)(fetch, basePath);
        },
        /**
         * Called by the client to exchange CAD for coin
         * @summary Request to buy Coin
         * @param {SignedPurchaseRequest} signedPurchaseRequest Signed buy order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCoinPurchase(signedPurchaseRequest: SignedPurchaseRequest, options?: any) {
            return PurchaseApiFp(configuration).requestCoinPurchase(signedPurchaseRequest, options)(fetch, basePath);
        },
    };
};

/**
 * PurchaseApi - object-oriented interface
 * @export
 * @class PurchaseApi
 * @extends {BaseAPI}
 */
export class PurchaseApi extends BaseAPI {
    /**
     * Called by the broker to confirm CAD was deposited and coin disbursed
     * @summary Mark buy order complete
     * @param {string} user User address
     * @param {number} id Id of purchase order to complete
     * @param {SignedMessage} signedMessage Signed PurchaseComplete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseApi
     */
    public completeCoinPurchase(user: string, id: number, signedMessage: SignedMessage, options?: any) {
        return PurchaseApiFp(this.configuration).completeCoinPurchase(user, id, signedMessage, options)(this.fetch, this.basePath);
    }

    /**
     * Called by the Broker once e-transfer initiated
     * @summary Confirm order opened
     * @param {string} user User address
     * @param {number} id Id of purchase order to return
     * @param {SignedPurchaseConfirm} signedPurchaseConfirm Signed buy order confirm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseApi
     */
    public confirmCoinPurchase(user: string, id: number, signedPurchaseConfirm: SignedPurchaseConfirm, options?: any) {
        return PurchaseApiFp(this.configuration).confirmCoinPurchase(user, id, signedPurchaseConfirm, options)(this.fetch, this.basePath);
    }

    /**
     * Called by the broker to retrieve all open buy orders.
     * @summary Query open buy orders
     * @param {string} user User address
     * @param {number} id Id of purchase order to return
     * @param {string} [state] Numerical state identifier.  If not present, all states will be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseApi
     */
    public queryCoinPurchase(user: string, id: number, state?: string, options?: any) {
        return PurchaseApiFp(this.configuration).queryCoinPurchase(user, id, state, options)(this.fetch, this.basePath);
    }

    /**
     * Called by the broker to retrieve all buy orders ID's in the passed state.
     * @summary Query buy order id's
     * @param {number} state Numerical state identifier.  Returned array will be all of type state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseApi
     */
    public queryCoinPurchasesIds(state: number, options?: any) {
        return PurchaseApiFp(this.configuration).queryCoinPurchasesIds(state, options)(this.fetch, this.basePath);
    }

    /**
     * Called by the client to exchange CAD for coin
     * @summary Request to buy Coin
     * @param {SignedPurchaseRequest} signedPurchaseRequest Signed buy order request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseApi
     */
    public requestCoinPurchase(signedPurchaseRequest: SignedPurchaseRequest, options?: any) {
        return PurchaseApiFp(this.configuration).requestCoinPurchase(signedPurchaseRequest, options)(this.fetch, this.basePath);
    }

}

/**
 * ReferrersApi - fetch parameter creator
 * @export
 */
export const ReferrersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Register the referral of new account
         * @param {NewAccountReferal} newAccountReferal Set referal for new account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(newAccountReferal: NewAccountReferal, options: any = {}): FetchArgs {
            // verify required parameter 'newAccountReferal' is not null or undefined
            if (newAccountReferal === null || newAccountReferal === undefined) {
                throw new RequiredError('newAccountReferal','Required parameter newAccountReferal was null or undefined when calling referralCreate.');
            }
            const localVarPath = `/referrers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NewAccountReferal" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(newAccountReferal || {}) : (newAccountReferal || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Gets the validity of the passed referrer
         * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrer: string, options: any = {}): FetchArgs {
            // verify required parameter 'referrer' is not null or undefined
            if (referrer === null || referrer === undefined) {
                throw new RequiredError('referrer','Required parameter referrer was null or undefined when calling referrerValid.');
            }
            const localVarPath = `/referrers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (referrer !== undefined) {
                localVarQueryParameter['referrer'] = referrer;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferrersApi - functional programming interface
 * @export
 */
export const ReferrersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Register the referral of new account
         * @param {NewAccountReferal} newAccountReferal Set referal for new account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(newAccountReferal: NewAccountReferal, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = ReferrersApiFetchParamCreator(configuration).referralCreate(newAccountReferal, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Gets the validity of the passed referrer
         * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrer: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = ReferrersApiFetchParamCreator(configuration).referrerValid(referrer, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReferrersApi - factory interface
 * @export
 */
export const ReferrersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Register the referral of new account
         * @param {NewAccountReferal} newAccountReferal Set referal for new account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(newAccountReferal: NewAccountReferal, options?: any) {
            return ReferrersApiFp(configuration).referralCreate(newAccountReferal, options)(fetch, basePath);
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Gets the validity of the passed referrer
         * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrer: string, options?: any) {
            return ReferrersApiFp(configuration).referrerValid(referrer, options)(fetch, basePath);
        },
    };
};

/**
 * ReferrersApi - object-oriented interface
 * @export
 * @class ReferrersApi
 * @extends {BaseAPI}
 */
export class ReferrersApi extends BaseAPI {
    /**
     * Returns a boolean indicating whether the passed referrer is valid
     * @summary Register the referral of new account
     * @param {NewAccountReferal} newAccountReferal Set referal for new account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferrersApi
     */
    public referralCreate(newAccountReferal: NewAccountReferal, options?: any) {
        return ReferrersApiFp(this.configuration).referralCreate(newAccountReferal, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a boolean indicating whether the passed referrer is valid
     * @summary Gets the validity of the passed referrer
     * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferrersApi
     */
    public referrerValid(referrer: string, options?: any) {
        return ReferrersApiFp(this.configuration).referrerValid(referrer, options)(this.fetch, this.basePath);
    }

}

/**
 * SecureApi - fetch parameter creator
 * @export
 */
export const SecureApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the authorization URL to redirect the user to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options: any = {}): FetchArgs {
            const localVarPath = `/secure/google`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the listing of available accounts
         * @param {GoogleToken} googleToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(googleToken: GoogleToken, options: any = {}): FetchArgs {
            // verify required parameter 'googleToken' is not null or undefined
            if (googleToken === null || googleToken === undefined) {
                throw new RequiredError('googleToken','Required parameter googleToken was null or undefined when calling googleList.');
            }
            const localVarPath = `/secure/google/list`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GoogleToken" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(googleToken || {}) : (googleToken || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Store on google drive
         * @param {GooglePutRequest} googlePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(googlePutRequest: GooglePutRequest, options: any = {}): FetchArgs {
            // verify required parameter 'googlePutRequest' is not null or undefined
            if (googlePutRequest === null || googlePutRequest === undefined) {
                throw new RequiredError('googlePutRequest','Required parameter googlePutRequest was null or undefined when calling googlePut.');
            }
            const localVarPath = `/secure/google/put`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GooglePutRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(googlePutRequest || {}) : (googlePutRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve previously-stored file from google drive
         * @param {GoogleGetRequest} googleGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(googleGetRequest: GoogleGetRequest, options: any = {}): FetchArgs {
            // verify required parameter 'googleGetRequest' is not null or undefined
            if (googleGetRequest === null || googleGetRequest === undefined) {
                throw new RequiredError('googleGetRequest','Required parameter googleGetRequest was null or undefined when calling googleRetrieve.');
            }
            const localVarPath = `/secure/google/get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GoogleGetRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(googleGetRequest || {}) : (googleGetRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecureApi - functional programming interface
 * @export
 */
export const SecureApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the authorization URL to redirect the user to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GoogleAuthUrl> {
            const localVarFetchArgs = SecureApiFetchParamCreator(configuration).googleAuthUrl(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the listing of available accounts
         * @param {GoogleToken} googleToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(googleToken: GoogleToken, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GoogleListResult> {
            const localVarFetchArgs = SecureApiFetchParamCreator(configuration).googleList(googleToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Store on google drive
         * @param {GooglePutRequest} googlePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(googlePutRequest: GooglePutRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SecureApiFetchParamCreator(configuration).googlePut(googlePutRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieve previously-stored file from google drive
         * @param {GoogleGetRequest} googleGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(googleGetRequest: GoogleGetRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GoogleGetResult> {
            const localVarFetchArgs = SecureApiFetchParamCreator(configuration).googleRetrieve(googleGetRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SecureApi - factory interface
 * @export
 */
export const SecureApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get the authorization URL to redirect the user to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options?: any) {
            return SecureApiFp(configuration).googleAuthUrl(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the listing of available accounts
         * @param {GoogleToken} googleToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(googleToken: GoogleToken, options?: any) {
            return SecureApiFp(configuration).googleList(googleToken, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Store on google drive
         * @param {GooglePutRequest} googlePutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(googlePutRequest: GooglePutRequest, options?: any) {
            return SecureApiFp(configuration).googlePut(googlePutRequest, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieve previously-stored file from google drive
         * @param {GoogleGetRequest} googleGetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(googleGetRequest: GoogleGetRequest, options?: any) {
            return SecureApiFp(configuration).googleRetrieve(googleGetRequest, options)(fetch, basePath);
        },
    };
};

/**
 * SecureApi - object-oriented interface
 * @export
 * @class SecureApi
 * @extends {BaseAPI}
 */
export class SecureApi extends BaseAPI {
    /**
     * 
     * @summary Get the authorization URL to redirect the user to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleAuthUrl(options?: any) {
        return SecureApiFp(this.configuration).googleAuthUrl(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the listing of available accounts
     * @param {GoogleToken} googleToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleList(googleToken: GoogleToken, options?: any) {
        return SecureApiFp(this.configuration).googleList(googleToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Store on google drive
     * @param {GooglePutRequest} googlePutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googlePut(googlePutRequest: GooglePutRequest, options?: any) {
        return SecureApiFp(this.configuration).googlePut(googlePutRequest, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieve previously-stored file from google drive
     * @param {GoogleGetRequest} googleGetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleRetrieve(googleGetRequest: GoogleGetRequest, options?: any) {
        return SecureApiFp(this.configuration).googleRetrieve(googleGetRequest, options)(this.fetch, this.basePath);
    }

}

/**
 * SellApi - fetch parameter creator
 * @export
 */
export const SellApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Called by the client to exchange coin for CAD using a certified transfer
         * @summary Request coin sale
         * @param {CertifiedSale} certifiedSale Signed certified transfer to this brokers address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certifiedCoinSale(certifiedSale: CertifiedSale, options: any = {}): FetchArgs {
            // verify required parameter 'certifiedSale' is not null or undefined
            if (certifiedSale === null || certifiedSale === undefined) {
                throw new RequiredError('certifiedSale','Required parameter certifiedSale was null or undefined when calling certifiedCoinSale.');
            }
            const localVarPath = `/exchange/sell/certified`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CertifiedSale" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(certifiedSale || {}) : (certifiedSale || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by the client to exchange coin for CAD
         * @summary Mark coin sale complete
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {SignedMessage} signedMessage Signed sell order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeCoinSale(user: string, id: number, signedMessage: SignedMessage, options: any = {}): FetchArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling completeCoinSale.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling completeCoinSale.');
            }
            // verify required parameter 'signedMessage' is not null or undefined
            if (signedMessage === null || signedMessage === undefined) {
                throw new RequiredError('signedMessage','Required parameter signedMessage was null or undefined when calling completeCoinSale.');
            }
            const localVarPath = `/exchange/sell/{user}/{id}/complete`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignedMessage" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(signedMessage || {}) : (signedMessage || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Called by the client to exchange coin for CAD
         * @summary Request coin sale
         * @param {SignedMessage} signedMessage Signed sell order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCoinSale(signedMessage: SignedMessage, options: any = {}): FetchArgs {
            // verify required parameter 'signedMessage' is not null or undefined
            if (signedMessage === null || signedMessage === undefined) {
                throw new RequiredError('signedMessage','Required parameter signedMessage was null or undefined when calling requestCoinSale.');
            }
            const localVarPath = `/exchange/sell/initiate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SignedMessage" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(signedMessage || {}) : (signedMessage || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SellApi - functional programming interface
 * @export
 */
export const SellApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Called by the client to exchange coin for CAD using a certified transfer
         * @summary Request coin sale
         * @param {CertifiedSale} certifiedSale Signed certified transfer to this brokers address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certifiedCoinSale(certifiedSale: CertifiedSale, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CertifiedTransferResponse> {
            const localVarFetchArgs = SellApiFetchParamCreator(configuration).certifiedCoinSale(certifiedSale, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by the client to exchange coin for CAD
         * @summary Mark coin sale complete
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {SignedMessage} signedMessage Signed sell order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeCoinSale(user: string, id: number, signedMessage: SignedMessage, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SellResponse> {
            const localVarFetchArgs = SellApiFetchParamCreator(configuration).completeCoinSale(user, id, signedMessage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Called by the client to exchange coin for CAD
         * @summary Request coin sale
         * @param {SignedMessage} signedMessage Signed sell order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCoinSale(signedMessage: SignedMessage, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SellResponse> {
            const localVarFetchArgs = SellApiFetchParamCreator(configuration).requestCoinSale(signedMessage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SellApi - factory interface
 * @export
 */
export const SellApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Called by the client to exchange coin for CAD using a certified transfer
         * @summary Request coin sale
         * @param {CertifiedSale} certifiedSale Signed certified transfer to this brokers address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certifiedCoinSale(certifiedSale: CertifiedSale, options?: any) {
            return SellApiFp(configuration).certifiedCoinSale(certifiedSale, options)(fetch, basePath);
        },
        /**
         * Called by the client to exchange coin for CAD
         * @summary Mark coin sale complete
         * @param {string} user User address
         * @param {number} id Id of purchase order to return
         * @param {SignedMessage} signedMessage Signed sell order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeCoinSale(user: string, id: number, signedMessage: SignedMessage, options?: any) {
            return SellApiFp(configuration).completeCoinSale(user, id, signedMessage, options)(fetch, basePath);
        },
        /**
         * Called by the client to exchange coin for CAD
         * @summary Request coin sale
         * @param {SignedMessage} signedMessage Signed sell order request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCoinSale(signedMessage: SignedMessage, options?: any) {
            return SellApiFp(configuration).requestCoinSale(signedMessage, options)(fetch, basePath);
        },
    };
};

/**
 * SellApi - object-oriented interface
 * @export
 * @class SellApi
 * @extends {BaseAPI}
 */
export class SellApi extends BaseAPI {
    /**
     * Called by the client to exchange coin for CAD using a certified transfer
     * @summary Request coin sale
     * @param {CertifiedSale} certifiedSale Signed certified transfer to this brokers address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellApi
     */
    public certifiedCoinSale(certifiedSale: CertifiedSale, options?: any) {
        return SellApiFp(this.configuration).certifiedCoinSale(certifiedSale, options)(this.fetch, this.basePath);
    }

    /**
     * Called by the client to exchange coin for CAD
     * @summary Mark coin sale complete
     * @param {string} user User address
     * @param {number} id Id of purchase order to return
     * @param {SignedMessage} signedMessage Signed sell order request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellApi
     */
    public completeCoinSale(user: string, id: number, signedMessage: SignedMessage, options?: any) {
        return SellApiFp(this.configuration).completeCoinSale(user, id, signedMessage, options)(this.fetch, this.basePath);
    }

    /**
     * Called by the client to exchange coin for CAD
     * @summary Request coin sale
     * @param {SignedMessage} signedMessage Signed sell order request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellApi
     */
    public requestCoinSale(signedMessage: SignedMessage, options?: any) {
        return SellApiFp(this.configuration).requestCoinSale(signedMessage, options)(this.fetch, this.basePath);
    }

}

/**
 * StatusApi - fetch parameter creator
 * @export
 */
export const StatusApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?)
         * @summary Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options: any = {}): FetchArgs {
            const localVarPath = `/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?)
         * @summary Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BrokerStatus> {
            const localVarFetchArgs = StatusApiFetchParamCreator(configuration).status(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?)
         * @summary Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: any) {
            return StatusApiFp(configuration).status(options)(fetch, basePath);
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * Returns info like brokers address, available balance, etc (?)
     * @summary Gets the operating status of the broker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public status(options?: any) {
        return StatusApiFp(this.configuration).status(options)(this.fetch, this.basePath);
    }

}

/**
 * TransferApi - fetch parameter creator
 * @export
 */
export const TransferApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
         * @summary Request Transfer from->to
         * @param {CertifiedTransferRequest} certifiedTransferRequest A request appropriately filled out and signed as described in the comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCertifiedTransfer(certifiedTransferRequest: CertifiedTransferRequest, options: any = {}): FetchArgs {
            // verify required parameter 'certifiedTransferRequest' is not null or undefined
            if (certifiedTransferRequest === null || certifiedTransferRequest === undefined) {
                throw new RequiredError('certifiedTransferRequest','Required parameter certifiedTransferRequest was null or undefined when calling makeCertifiedTransfer.');
            }
            const localVarPath = `/certifiedTransfer`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CertifiedTransferRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(certifiedTransferRequest || {}) : (certifiedTransferRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransferApi - functional programming interface
 * @export
 */
export const TransferApiFp = function(configuration?: Configuration) {
    return {
        /**
         * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
         * @summary Request Transfer from->to
         * @param {CertifiedTransferRequest} certifiedTransferRequest A request appropriately filled out and signed as described in the comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCertifiedTransfer(certifiedTransferRequest: CertifiedTransferRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CertifiedTransferResponse> {
            const localVarFetchArgs = TransferApiFetchParamCreator(configuration).makeCertifiedTransfer(certifiedTransferRequest, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TransferApi - factory interface
 * @export
 */
export const TransferApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
         * @summary Request Transfer from->to
         * @param {CertifiedTransferRequest} certifiedTransferRequest A request appropriately filled out and signed as described in the comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeCertifiedTransfer(certifiedTransferRequest: CertifiedTransferRequest, options?: any) {
            return TransferApiFp(configuration).makeCertifiedTransfer(certifiedTransferRequest, options)(fetch, basePath);
        },
    };
};

/**
 * TransferApi - object-oriented interface
 * @export
 * @class TransferApi
 * @extends {BaseAPI}
 */
export class TransferApi extends BaseAPI {
    /**
     * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
     * @summary Request Transfer from->to
     * @param {CertifiedTransferRequest} certifiedTransferRequest A request appropriately filled out and signed as described in the comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferApi
     */
    public makeCertifiedTransfer(certifiedTransferRequest: CertifiedTransferRequest, options?: any) {
        return TransferApiFp(this.configuration).makeCertifiedTransfer(certifiedTransferRequest, options)(this.fetch, this.basePath);
    }

}

