---
swagger: "2.0"
info:
  description: "The TapCap resolution.  This service is the trusted 3rd party that\
    \ weekly settles TapCap purchases"
  version: "0.0.1"
  title: "The TapCap Manager"
  contact:
    email: "stephen.taylor.dev@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8091"
tags:
- name: "Transactions"
  description: "The: TapCap manager is responsible for resolving TapCap transactions,\
    \ transfering the appropriate coin from seller to buyer weekly"
- name: "Status"
  description: "Users may query their account status"
- name: "Unlock"
  description: "Temp method for unlocking account till we find something better (NOT\
    \ FOR PUBLIC USE)"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /tap/broker:
    post:
      tags:
      - "Transactions"
      summary: "Broker: Register new TapCap transaction"
      operationId: "tapCapBroker"
      parameters:
      - in: "body"
        name: "request"
        description: "TapCap exchange request"
        required: true
        schema:
          $ref: "#/definitions/SignedMessage"
      responses:
        200:
          description: "Transaction Result"
          schema:
            $ref: "#/definitions/ErrorMessage"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorMessage"
      x-swagger-router-controller: "Transactions"
  /tap/client:
    post:
      tags:
      - "Transactions"
      summary: "Client: Confirm new TapCap transaction"
      operationId: "tapCapClient"
      parameters:
      - in: "body"
        name: "request"
        description: "TapCap status request"
        required: true
        schema:
          $ref: "#/definitions/SignedMessage"
      responses:
        200:
          description: "TapCap Token valid for the next purchase"
          schema:
            $ref: "#/definitions/SignedMessage"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorMessage"
      x-swagger-router-controller: "Transactions"
  /status/summary:
    post:
      tags:
      - "Status"
      summary: "TapCap current status"
      description: "User TapCap status"
      operationId: "tapCapStatus"
      parameters:
      - in: "body"
        name: "request"
        description: "TapCap status request"
        required: true
        schema:
          $ref: "#/definitions/SignedMessage"
      responses:
        200:
          description: "TapCap Status"
          schema:
            $ref: "#/definitions/TapCapQueryResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorMessage"
      x-swagger-router-controller: "Status"
  /status/history:
    post:
      tags:
      - "Status"
      summary: "TapCap history"
      description: "User TapCap history in the ranges provided"
      operationId: "tapCapHistory"
      parameters:
      - in: "body"
        name: "request"
        description: "Purchase Request info"
        required: true
        schema:
          $ref: "#/definitions/SignedMessage"
      responses:
        200:
          description: "TapCap Status"
          schema:
            $ref: "#/definitions/TapCapHistoryResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorMessage"
      x-swagger-router-controller: "Status"
  /unlock:
    post:
      tags:
      - "Unlock"
      operationId: "unlock"
      parameters:
      - name: "X-Request-Key"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ErrorMessage"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorMessage"
      x-swagger-router-controller: "Unlock"
definitions:
  TapCapQueryRequest:
    required:
    - "timestamp"
    properties:
      timestamp:
        type: "integer"
        format: "int64"
  TapCapQueryResponse:
    required:
    - "balance"
    - "token"
    properties:
      balance:
        type: "integer"
        format: "int64"
      token:
        $ref: "#/definitions/SignedMessage"
    example:
      balance: 0
      token:
        signature: "signature"
        message: "message"
  TapCapHistoryRequest:
    required:
    - "fromTimestamp"
    - "msgTimestamp"
    - "untilTimestamp"
    properties:
      fromTimestamp:
        type: "integer"
        format: "int64"
      untilTimestamp:
        type: "integer"
        format: "int64"
      msgTimestamp:
        type: "integer"
        format: "int64"
  TapCapCompletedTransaction:
    required:
    - "coinAmount"
    - "coinBalance"
    - "fiatAmount"
    - "merchantId"
    - "timestamp"
    properties:
      timestamp:
        type: "integer"
        format: "int64"
      fiatAmount:
        type: "number"
        format: "double"
      coinAmount:
        type: "integer"
        format: "int64"
      coinBalance:
        type: "integer"
        format: "int64"
      merchantId:
        type: "string"
    example:
      coinAmount: 1
      merchantId: "merchantId"
      fiatAmount: 6.02745618307040320615897144307382404804229736328125
      coinBalance: 5
      timestamp: 0
  TapCapHistoryResponse:
    required:
    - "history"
    properties:
      history:
        type: "array"
        items:
          $ref: "#/definitions/TapCapCompletedTransaction"
    example:
      history:
      - coinAmount: 1
        merchantId: "merchantId"
        fiatAmount: 6.02745618307040320615897144307382404804229736328125
        coinBalance: 5
        timestamp: 0
      - coinAmount: 1
        merchantId: "merchantId"
        fiatAmount: 6.02745618307040320615897144307382404804229736328125
        coinBalance: 5
        timestamp: 0
  TapCapToken:
    required:
    - "availableBalance"
    - "clientAccount"
    - "nonce"
    - "timestamp"
    properties:
      clientAccount:
        type: "string"
      availableBalance:
        type: "integer"
        format: "int64"
      nonce:
        type: "integer"
      timestamp:
        type: "integer"
        format: "int64"
  TapCapClientRequest:
    required:
    - "cryptoData"
    - "gpoData"
    - "timestamp"
    - "token"
    properties:
      timestamp:
        type: "integer"
        format: "int64"
      gpoData:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      cryptoData:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      token:
        $ref: "#/definitions/SignedMessage"
  TapCapBrokerPurchase:
    required:
    - "FxRate"
    - "coinCharge"
    - "cryptoCertificate"
    - "signedRequest"
    properties:
      signedRequest:
        $ref: "#/definitions/SignedMessage"
      FxRate:
        $ref: "#/definitions/FXRate"
      coinCharge:
        type: "integer"
        format: "int64"
      cryptoCertificate:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
  TapCapBrokerComplete:
    required:
    - "FxRate"
    - "coinCharge"
    - "merchantId"
    - "signedRequest"
    properties:
      signedRequest:
        $ref: "#/definitions/SignedMessage"
      FxRate:
        $ref: "#/definitions/FXRate"
      coinCharge:
        type: "integer"
        format: "int64"
      merchantId:
        type: "string"
  FXRate:
    required:
    - "buy"
    - "fxRate"
    - "sell"
    - "validFrom"
    - "validTill"
    properties:
      target:
        type: "integer"
      buy:
        type: "number"
        format: "double"
      sell:
        type: "number"
        format: "double"
      fxRate:
        type: "number"
        format: "double"
      validFrom:
        type: "integer"
        format: "int64"
      validTill:
        type: "integer"
        format: "int64"
  SignedMessage:
    required:
    - "message"
    - "signature"
    properties:
      message:
        type: "string"
      signature:
        type: "string"
    example:
      signature: "signature"
      message: "message"
  ErrorMessage:
    required:
    - "code"
    - "id"
    - "message"
    properties:
      code:
        type: "integer"
      id:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      id: "id"
      message: "message"
  TapCapToken_2:
    required:
    - "availableBalance"
    - "clientAccount"
    - "nonce"
    - "timestamp"
    properties:
      clientAccount:
        type: "string"
      availableBalance:
        type: "integer"
        format: "int64"
      nonce:
        type: "integer"
      timestamp:
        type: "integer"
        format: "int64"
  TapCapClientRequest_2:
    required:
    - "cryptoData"
    - "gpoData"
    - "timestamp"
    - "token"
    properties:
      timestamp:
        type: "integer"
        format: "int64"
      gpoData:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      cryptoData:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      token:
        $ref: "#/definitions/SignedMessage"
  TapCapBrokerPurchase_2:
    required:
    - "FxRate"
    - "coinCharge"
    - "cryptoCertificate"
    - "signedRequest"
    properties:
      signedRequest:
        $ref: "#/definitions/SignedMessage"
      FxRate:
        $ref: "#/definitions/FXRate"
      coinCharge:
        type: "integer"
        format: "int64"
      cryptoCertificate:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
  FXRate_2:
    required:
    - "buy"
    - "fxRate"
    - "sell"
    - "validFrom"
    - "validTill"
    properties:
      target:
        type: "integer"
      buy:
        type: "number"
        format: "double"
      sell:
        type: "number"
        format: "double"
      fxRate:
        type: "number"
        format: "double"
      validFrom:
        type: "integer"
        format: "int64"
      validTill:
        type: "integer"
        format: "int64"
  TapCapBrokerComplete_2:
    required:
    - "FxRate"
    - "coinCharge"
    - "merchantId"
    - "signedRequest"
    properties:
      signedRequest:
        $ref: "#/definitions/SignedMessage"
      FxRate:
        $ref: "#/definitions/FXRate"
      coinCharge:
        type: "integer"
        format: "int64"
      merchantId:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
