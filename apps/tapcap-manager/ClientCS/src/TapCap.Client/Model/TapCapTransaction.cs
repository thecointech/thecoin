/* 
 * The TapCap Manager
 *
 * The TapCap resolution.  This service is the trusted 3rd party that weekly settles TapCap purchases
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCap.Client.Client.OpenAPIDateConverter;

namespace TapCap.Client.Model
{
    /// <summary>
    /// TapCapTransaction
    /// </summary>
    [DataContract]
    public partial class TapCapTransaction :  IEquatable<TapCapTransaction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapTransaction" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="fiatAmount">fiatAmount (required).</param>
        /// <param name="coinAmount">coinAmount (required).</param>
        /// <param name="coinBalance">coinBalance (required).</param>
        /// <param name="merchantId">merchantId (required).</param>
        public TapCapTransaction(double? timestamp = default(double?), double? fiatAmount = default(double?), double? coinAmount = default(double?), double? coinBalance = default(double?), string merchantId = default(string))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "fiatAmount" is required (not null)
            if (fiatAmount == null)
            {
                throw new InvalidDataException("fiatAmount is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.FiatAmount = fiatAmount;
            }
            // to ensure "coinAmount" is required (not null)
            if (coinAmount == null)
            {
                throw new InvalidDataException("coinAmount is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.CoinAmount = coinAmount;
            }
            // to ensure "coinBalance" is required (not null)
            if (coinBalance == null)
            {
                throw new InvalidDataException("coinBalance is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.CoinBalance = coinBalance;
            }
            // to ensure "merchantId" is required (not null)
            if (merchantId == null)
            {
                throw new InvalidDataException("merchantId is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.MerchantId = merchantId;
            }
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public double? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets FiatAmount
        /// </summary>
        [DataMember(Name="fiatAmount", EmitDefaultValue=false)]
        public double? FiatAmount { get; set; }

        /// <summary>
        /// Gets or Sets CoinAmount
        /// </summary>
        [DataMember(Name="coinAmount", EmitDefaultValue=false)]
        public double? CoinAmount { get; set; }

        /// <summary>
        /// Gets or Sets CoinBalance
        /// </summary>
        [DataMember(Name="coinBalance", EmitDefaultValue=false)]
        public double? CoinBalance { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapTransaction {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FiatAmount: ").Append(FiatAmount).Append("\n");
            sb.Append("  CoinAmount: ").Append(CoinAmount).Append("\n");
            sb.Append("  CoinBalance: ").Append(CoinBalance).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapTransaction);
        }

        /// <summary>
        /// Returns true if TapCapTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.FiatAmount == input.FiatAmount ||
                    (this.FiatAmount != null &&
                    this.FiatAmount.Equals(input.FiatAmount))
                ) && 
                (
                    this.CoinAmount == input.CoinAmount ||
                    (this.CoinAmount != null &&
                    this.CoinAmount.Equals(input.CoinAmount))
                ) && 
                (
                    this.CoinBalance == input.CoinBalance ||
                    (this.CoinBalance != null &&
                    this.CoinBalance.Equals(input.CoinBalance))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.FiatAmount != null)
                    hashCode = hashCode * 59 + this.FiatAmount.GetHashCode();
                if (this.CoinAmount != null)
                    hashCode = hashCode * 59 + this.CoinAmount.GetHashCode();
                if (this.CoinBalance != null)
                    hashCode = hashCode * 59 + this.CoinBalance.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                return hashCode;
            }
        }
    }

}
