/* 
 * TheCoin Broker
 *
 * TheCoin broker services.  To be implemented allowing exchange of local currency to THESE
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = TapCap.Client.Client.SwaggerDateConverter;

namespace TapCap.Client.Model
{
    /// <summary>
    /// TapCapQueryResponse
    /// </summary>
    [DataContract]
    public partial class TapCapQueryResponse :  IEquatable<TapCapQueryResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapQueryResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapQueryResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapQueryResponse" /> class.
        /// </summary>
        /// <param name="Balance">Balance (required).</param>
        /// <param name="WeeklyTopup">WeeklyTopup (required).</param>
        /// <param name="Token">Token (required).</param>
        public TapCapQueryResponse(decimal? Balance = default(decimal?), decimal? WeeklyTopup = default(decimal?), TapCapTokenSigned Token = default(TapCapTokenSigned))
        {
            // to ensure "Balance" is required (not null)
            if (Balance == null)
            {
                throw new InvalidDataException("Balance is a required property for TapCapQueryResponse and cannot be null");
            }
            else
            {
                this.Balance = Balance;
            }
            // to ensure "WeeklyTopup" is required (not null)
            if (WeeklyTopup == null)
            {
                throw new InvalidDataException("WeeklyTopup is a required property for TapCapQueryResponse and cannot be null");
            }
            else
            {
                this.WeeklyTopup = WeeklyTopup;
            }
            // to ensure "Token" is required (not null)
            if (Token == null)
            {
                throw new InvalidDataException("Token is a required property for TapCapQueryResponse and cannot be null");
            }
            else
            {
                this.Token = Token;
            }
        }
        
        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public decimal? Balance { get; set; }

        /// <summary>
        /// Gets or Sets WeeklyTopup
        /// </summary>
        [DataMember(Name="weeklyTopup", EmitDefaultValue=false)]
        public decimal? WeeklyTopup { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public TapCapTokenSigned Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapQueryResponse {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  WeeklyTopup: ").Append(WeeklyTopup).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapQueryResponse);
        }

        /// <summary>
        /// Returns true if TapCapQueryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapQueryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapQueryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.WeeklyTopup == input.WeeklyTopup ||
                    (this.WeeklyTopup != null &&
                    this.WeeklyTopup.Equals(input.WeeklyTopup))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.WeeklyTopup != null)
                    hashCode = hashCode * 59 + this.WeeklyTopup.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }
    }

}
