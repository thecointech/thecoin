/* 
 * The TapCap Manager
 *
 * The TapCap resolution.  This service is the trusted 3rd party that weekly settles TapCap purchases
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCap.Client.Client.OpenAPIDateConverter;

namespace TapCap.Client.Model
{
    /// <summary>
    /// TapCapPurchaseBroker
    /// </summary>
    [DataContract]
    public partial class TapCapPurchaseBroker :  IEquatable<TapCapPurchaseBroker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapPurchaseBroker" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapPurchaseBroker() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapPurchaseBroker" /> class.
        /// </summary>
        /// <param name="clientRequest">clientRequest (required).</param>
        /// <param name="coin">coin (required).</param>
        /// <param name="cert">cert (required).</param>
        public TapCapPurchaseBroker(SignedMessage clientRequest = default(SignedMessage), double? coin = default(double?), string cert = default(string))
        {
            // to ensure "clientRequest" is required (not null)
            if (clientRequest == null)
            {
                throw new InvalidDataException("clientRequest is a required property for TapCapPurchaseBroker and cannot be null");
            }
            else
            {
                this.ClientRequest = clientRequest;
            }
            // to ensure "coin" is required (not null)
            if (coin == null)
            {
                throw new InvalidDataException("coin is a required property for TapCapPurchaseBroker and cannot be null");
            }
            else
            {
                this.Coin = coin;
            }
            // to ensure "cert" is required (not null)
            if (cert == null)
            {
                throw new InvalidDataException("cert is a required property for TapCapPurchaseBroker and cannot be null");
            }
            else
            {
                this.Cert = cert;
            }
        }
        
        /// <summary>
        /// Gets or Sets ClientRequest
        /// </summary>
        [DataMember(Name="clientRequest", EmitDefaultValue=false)]
        public SignedMessage ClientRequest { get; set; }

        /// <summary>
        /// Gets or Sets Coin
        /// </summary>
        [DataMember(Name="coin", EmitDefaultValue=false)]
        public double? Coin { get; set; }

        /// <summary>
        /// Gets or Sets Cert
        /// </summary>
        [DataMember(Name="cert", EmitDefaultValue=false)]
        public string Cert { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapPurchaseBroker {\n");
            sb.Append("  ClientRequest: ").Append(ClientRequest).Append("\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  Cert: ").Append(Cert).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapPurchaseBroker);
        }

        /// <summary>
        /// Returns true if TapCapPurchaseBroker instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapPurchaseBroker to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapPurchaseBroker input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientRequest == input.ClientRequest ||
                    (this.ClientRequest != null &&
                    this.ClientRequest.Equals(input.ClientRequest))
                ) && 
                (
                    this.Coin == input.Coin ||
                    (this.Coin != null &&
                    this.Coin.Equals(input.Coin))
                ) && 
                (
                    this.Cert == input.Cert ||
                    (this.Cert != null &&
                    this.Cert.Equals(input.Cert))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientRequest != null)
                    hashCode = hashCode * 59 + this.ClientRequest.GetHashCode();
                if (this.Coin != null)
                    hashCode = hashCode * 59 + this.Coin.GetHashCode();
                if (this.Cert != null)
                    hashCode = hashCode * 59 + this.Cert.GetHashCode();
                return hashCode;
            }
        }
    }

}
