/* 
 * TheCoin Broker
 *
 * TheCoin TapCap resolution.  This service is the trusted 3rd party that weekly settles TapCap purchases
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = TapCap.Client.Client.SwaggerDateConverter;

namespace TapCap.Client.Model
{
    /// <summary>
    /// TapCapHistoryRequest
    /// </summary>
    [DataContract]
    public partial class TapCapHistoryRequest :  IEquatable<TapCapHistoryRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapHistoryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapHistoryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapHistoryRequest" /> class.
        /// </summary>
        /// <param name="FromTimestamp">FromTimestamp (required).</param>
        /// <param name="UntilTimestamp">UntilTimestamp (required).</param>
        /// <param name="MsgTimestamp">MsgTimestamp (required).</param>
        public TapCapHistoryRequest(decimal? FromTimestamp = default(decimal?), decimal? UntilTimestamp = default(decimal?), decimal? MsgTimestamp = default(decimal?))
        {
            // to ensure "FromTimestamp" is required (not null)
            if (FromTimestamp == null)
            {
                throw new InvalidDataException("FromTimestamp is a required property for TapCapHistoryRequest and cannot be null");
            }
            else
            {
                this.FromTimestamp = FromTimestamp;
            }
            // to ensure "UntilTimestamp" is required (not null)
            if (UntilTimestamp == null)
            {
                throw new InvalidDataException("UntilTimestamp is a required property for TapCapHistoryRequest and cannot be null");
            }
            else
            {
                this.UntilTimestamp = UntilTimestamp;
            }
            // to ensure "MsgTimestamp" is required (not null)
            if (MsgTimestamp == null)
            {
                throw new InvalidDataException("MsgTimestamp is a required property for TapCapHistoryRequest and cannot be null");
            }
            else
            {
                this.MsgTimestamp = MsgTimestamp;
            }
        }
        
        /// <summary>
        /// Gets or Sets FromTimestamp
        /// </summary>
        [DataMember(Name="fromTimestamp", EmitDefaultValue=false)]
        public decimal? FromTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets UntilTimestamp
        /// </summary>
        [DataMember(Name="untilTimestamp", EmitDefaultValue=false)]
        public decimal? UntilTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets MsgTimestamp
        /// </summary>
        [DataMember(Name="msgTimestamp", EmitDefaultValue=false)]
        public decimal? MsgTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapHistoryRequest {\n");
            sb.Append("  FromTimestamp: ").Append(FromTimestamp).Append("\n");
            sb.Append("  UntilTimestamp: ").Append(UntilTimestamp).Append("\n");
            sb.Append("  MsgTimestamp: ").Append(MsgTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapHistoryRequest);
        }

        /// <summary>
        /// Returns true if TapCapHistoryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapHistoryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapHistoryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromTimestamp == input.FromTimestamp ||
                    (this.FromTimestamp != null &&
                    this.FromTimestamp.Equals(input.FromTimestamp))
                ) && 
                (
                    this.UntilTimestamp == input.UntilTimestamp ||
                    (this.UntilTimestamp != null &&
                    this.UntilTimestamp.Equals(input.UntilTimestamp))
                ) && 
                (
                    this.MsgTimestamp == input.MsgTimestamp ||
                    (this.MsgTimestamp != null &&
                    this.MsgTimestamp.Equals(input.MsgTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromTimestamp != null)
                    hashCode = hashCode * 59 + this.FromTimestamp.GetHashCode();
                if (this.UntilTimestamp != null)
                    hashCode = hashCode * 59 + this.UntilTimestamp.GetHashCode();
                if (this.MsgTimestamp != null)
                    hashCode = hashCode * 59 + this.MsgTimestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
