/* 
 * TheCoin Broker
 *
 * TheCoin broker services.  To be implemented allowing exchange of local currency to THESE
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = TapCap.Client.Client.SwaggerDateConverter;

namespace TapCap.Client.Model
{
    /// <summary>
    /// TapCapHistoryResponse
    /// </summary>
    [DataContract]
    public partial class TapCapHistoryResponse :  IEquatable<TapCapHistoryResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapHistoryResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapHistoryResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapHistoryResponse" /> class.
        /// </summary>
        /// <param name="History">History (required).</param>
        public TapCapHistoryResponse(List<TapCapTransaction> History = default(List<TapCapTransaction>))
        {
            // to ensure "History" is required (not null)
            if (History == null)
            {
                throw new InvalidDataException("History is a required property for TapCapHistoryResponse and cannot be null");
            }
            else
            {
                this.History = History;
            }
        }
        
        /// <summary>
        /// Gets or Sets History
        /// </summary>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public List<TapCapTransaction> History { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapHistoryResponse {\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapHistoryResponse);
        }

        /// <summary>
        /// Returns true if TapCapHistoryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapHistoryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapHistoryResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.History == input.History ||
                    this.History != null &&
                    this.History.SequenceEqual(input.History)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.History != null)
                    hashCode = hashCode * 59 + this.History.GetHashCode();
                return hashCode;
            }
        }
    }

}
