/**
 * The TapCap Manager
 * The TapCap resolution.  This service is the trusted 3rd party that weekly settles TapCap purchases
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Unlock service.
* @module api/UnlockApi
* @version 0.0.1
*/
export default class UnlockApi {

    /**
    * Constructs a new UnlockApi. 
    * @alias module:api/UnlockApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} xRequestKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    unlockWithHttpInfo(xRequestKey) {
      let postBody = null;

      // verify the required parameter 'xRequestKey' is set
      if (xRequestKey === undefined || xRequestKey === null) {
        throw new Error("Missing the required parameter 'xRequestKey' when calling unlock");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Request-Key': xRequestKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} xRequestKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    unlock(xRequestKey) {
      return this.unlockWithHttpInfo(xRequestKey)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
