/* 
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCapSupplier.Client.Client.OpenAPIDateConverter;

namespace TapCapSupplier.Client.Model
{
    /// <summary>
    /// QueryWithHistory
    /// </summary>
    [DataContract]
    public partial class QueryWithHistory :  IEquatable<QueryWithHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryWithHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryWithHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryWithHistory" /> class.
        /// </summary>
        /// <param name="query">query (required).</param>
        /// <param name="queries">queries (required).</param>
        /// <param name="responses">responses (required).</param>
        public QueryWithHistory(byte[] query = default(byte[]), List<byte[]> queries = default(List<byte[]>), List<byte[]> responses = default(List<byte[]>))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new InvalidDataException("query is a required property for QueryWithHistory and cannot be null");
            }
            else
            {
                this.Query = query;
            }
            // to ensure "queries" is required (not null)
            if (queries == null)
            {
                throw new InvalidDataException("queries is a required property for QueryWithHistory and cannot be null");
            }
            else
            {
                this.Queries = queries;
            }
            // to ensure "responses" is required (not null)
            if (responses == null)
            {
                throw new InvalidDataException("responses is a required property for QueryWithHistory and cannot be null");
            }
            else
            {
                this.Responses = responses;
            }
        }
        
        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public byte[] Query { get; set; }

        /// <summary>
        /// Gets or Sets Queries
        /// </summary>
        [DataMember(Name="queries", EmitDefaultValue=false)]
        public List<byte[]> Queries { get; set; }

        /// <summary>
        /// Gets or Sets Responses
        /// </summary>
        [DataMember(Name="responses", EmitDefaultValue=false)]
        public List<byte[]> Responses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryWithHistory {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Queries: ").Append(Queries).Append("\n");
            sb.Append("  Responses: ").Append(Responses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryWithHistory);
        }

        /// <summary>
        /// Returns true if QueryWithHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryWithHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryWithHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Queries == input.Queries ||
                    this.Queries != null &&
                    this.Queries.SequenceEqual(input.Queries)
                ) && 
                (
                    this.Responses == input.Responses ||
                    this.Responses != null &&
                    this.Responses.SequenceEqual(input.Responses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                if (this.Queries != null)
                    hashCode = hashCode * 59 + this.Queries.GetHashCode();
                if (this.Responses != null)
                    hashCode = hashCode * 59 + this.Responses.GetHashCode();
                return hashCode;
            }
        }
    }

}
