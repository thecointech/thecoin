/* 
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCap.Supplier.Client.OpenAPIDateConverter;

namespace TapCap.Supplier.Model
{
    /// <summary>
    /// SignedTapcapContest
    /// </summary>
    [DataContract]
    public partial class SignedTapcapContest :  IEquatable<SignedTapcapContest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SignedTapcapContest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SignedTapcapContest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SignedTapcapContest" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="fiatAmount">fiatAmount (required).</param>
        /// <param name="pdol">pdol (required).</param>
        /// <param name="token">token (required).</param>
        /// <param name="signature">signature (required).</param>
        public SignedTapcapContest(double? timestamp = default(double?), double? fiatAmount = default(double?), byte[] pdol = default(byte[]), SignedMessage token = default(SignedMessage), string signature = default(string))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for SignedTapcapContest and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "fiatAmount" is required (not null)
            if (fiatAmount == null)
            {
                throw new InvalidDataException("fiatAmount is a required property for SignedTapcapContest and cannot be null");
            }
            else
            {
                this.FiatAmount = fiatAmount;
            }
            // to ensure "pdol" is required (not null)
            if (pdol == null)
            {
                throw new InvalidDataException("pdol is a required property for SignedTapcapContest and cannot be null");
            }
            else
            {
                this.Pdol = pdol;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for SignedTapcapContest and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for SignedTapcapContest and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public double? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets FiatAmount
        /// </summary>
        [DataMember(Name="fiatAmount", EmitDefaultValue=false)]
        public double? FiatAmount { get; set; }

        /// <summary>
        /// Gets or Sets Pdol
        /// </summary>
        [DataMember(Name="pdol", EmitDefaultValue=false)]
        public byte[] Pdol { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public SignedMessage Token { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignedTapcapContest {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FiatAmount: ").Append(FiatAmount).Append("\n");
            sb.Append("  Pdol: ").Append(Pdol).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SignedTapcapContest);
        }

        /// <summary>
        /// Returns true if SignedTapcapContest instances are equal
        /// </summary>
        /// <param name="input">Instance of SignedTapcapContest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignedTapcapContest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.FiatAmount == input.FiatAmount ||
                    (this.FiatAmount != null &&
                    this.FiatAmount.Equals(input.FiatAmount))
                ) && 
                (
                    this.Pdol == input.Pdol ||
                    (this.Pdol != null &&
                    this.Pdol.Equals(input.Pdol))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.FiatAmount != null)
                    hashCode = hashCode * 59 + this.FiatAmount.GetHashCode();
                if (this.Pdol != null)
                    hashCode = hashCode * 59 + this.Pdol.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }
    }

}
