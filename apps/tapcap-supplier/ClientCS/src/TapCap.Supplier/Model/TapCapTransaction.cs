/* 
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCapManager.Supplier.Client.OpenAPIDateConverter;

namespace TapCapManager.Supplier.Model
{
    /// <summary>
    /// TapCapTransaction
    /// </summary>
    [DataContract]
    public partial class TapCapTransaction :  IEquatable<TapCapTransaction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapTransaction" /> class.
        /// </summary>
        /// <param name="clientTxId">clientTxId (required).</param>
        /// <param name="supplierTxId">supplierTxId (required).</param>
        /// <param name="fiatRequested">fiatRequested (required).</param>
        /// <param name="coinCharged">coinCharged (required).</param>
        /// <param name="responseData">responseData (required).</param>
        public TapCapTransaction(int? clientTxId = default(int?), int? supplierTxId = default(int?), double? fiatRequested = default(double?), long? coinCharged = default(long?), byte[] responseData = default(byte[]))
        {
            // to ensure "clientTxId" is required (not null)
            if (clientTxId == null)
            {
                throw new InvalidDataException("clientTxId is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.ClientTxId = clientTxId;
            }
            // to ensure "supplierTxId" is required (not null)
            if (supplierTxId == null)
            {
                throw new InvalidDataException("supplierTxId is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.SupplierTxId = supplierTxId;
            }
            // to ensure "fiatRequested" is required (not null)
            if (fiatRequested == null)
            {
                throw new InvalidDataException("fiatRequested is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.FiatRequested = fiatRequested;
            }
            // to ensure "coinCharged" is required (not null)
            if (coinCharged == null)
            {
                throw new InvalidDataException("coinCharged is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.CoinCharged = coinCharged;
            }
            // to ensure "responseData" is required (not null)
            if (responseData == null)
            {
                throw new InvalidDataException("responseData is a required property for TapCapTransaction and cannot be null");
            }
            else
            {
                this.ResponseData = responseData;
            }
        }
        
        /// <summary>
        /// Gets or Sets ClientTxId
        /// </summary>
        [DataMember(Name="clientTxId", EmitDefaultValue=false)]
        public int? ClientTxId { get; set; }

        /// <summary>
        /// Gets or Sets SupplierTxId
        /// </summary>
        [DataMember(Name="supplierTxId", EmitDefaultValue=false)]
        public int? SupplierTxId { get; set; }

        /// <summary>
        /// Gets or Sets FiatRequested
        /// </summary>
        [DataMember(Name="fiatRequested", EmitDefaultValue=false)]
        public double? FiatRequested { get; set; }

        /// <summary>
        /// Gets or Sets CoinCharged
        /// </summary>
        [DataMember(Name="coinCharged", EmitDefaultValue=false)]
        public long? CoinCharged { get; set; }

        /// <summary>
        /// Gets or Sets ResponseData
        /// </summary>
        [DataMember(Name="responseData", EmitDefaultValue=false)]
        public byte[] ResponseData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapTransaction {\n");
            sb.Append("  ClientTxId: ").Append(ClientTxId).Append("\n");
            sb.Append("  SupplierTxId: ").Append(SupplierTxId).Append("\n");
            sb.Append("  FiatRequested: ").Append(FiatRequested).Append("\n");
            sb.Append("  CoinCharged: ").Append(CoinCharged).Append("\n");
            sb.Append("  ResponseData: ").Append(ResponseData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapTransaction);
        }

        /// <summary>
        /// Returns true if TapCapTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientTxId == input.ClientTxId ||
                    (this.ClientTxId != null &&
                    this.ClientTxId.Equals(input.ClientTxId))
                ) && 
                (
                    this.SupplierTxId == input.SupplierTxId ||
                    (this.SupplierTxId != null &&
                    this.SupplierTxId.Equals(input.SupplierTxId))
                ) && 
                (
                    this.FiatRequested == input.FiatRequested ||
                    (this.FiatRequested != null &&
                    this.FiatRequested.Equals(input.FiatRequested))
                ) && 
                (
                    this.CoinCharged == input.CoinCharged ||
                    (this.CoinCharged != null &&
                    this.CoinCharged.Equals(input.CoinCharged))
                ) && 
                (
                    this.ResponseData == input.ResponseData ||
                    (this.ResponseData != null &&
                    this.ResponseData.Equals(input.ResponseData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientTxId != null)
                    hashCode = hashCode * 59 + this.ClientTxId.GetHashCode();
                if (this.SupplierTxId != null)
                    hashCode = hashCode * 59 + this.SupplierTxId.GetHashCode();
                if (this.FiatRequested != null)
                    hashCode = hashCode * 59 + this.FiatRequested.GetHashCode();
                if (this.CoinCharged != null)
                    hashCode = hashCode * 59 + this.CoinCharged.GetHashCode();
                if (this.ResponseData != null)
                    hashCode = hashCode * 59 + this.ResponseData.GetHashCode();
                return hashCode;
            }
        }
    }

}
