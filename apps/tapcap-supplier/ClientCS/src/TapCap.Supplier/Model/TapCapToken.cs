/* 
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCapManager.Supplier.Client.OpenAPIDateConverter;

namespace TapCapManager.Supplier.Model
{
    /// <summary>
    /// TapCapToken
    /// </summary>
    [DataContract]
    public partial class TapCapToken :  IEquatable<TapCapToken>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapToken" /> class.
        /// </summary>
        /// <param name="clientAccount">clientAccount (required).</param>
        /// <param name="availableBalance">availableBalance (required).</param>
        /// <param name="transactionId">transactionId (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        public TapCapToken(string clientAccount = default(string), long? availableBalance = default(long?), int? transactionId = default(int?), long? timestamp = default(long?))
        {
            // to ensure "clientAccount" is required (not null)
            if (clientAccount == null)
            {
                throw new InvalidDataException("clientAccount is a required property for TapCapToken and cannot be null");
            }
            else
            {
                this.ClientAccount = clientAccount;
            }
            // to ensure "availableBalance" is required (not null)
            if (availableBalance == null)
            {
                throw new InvalidDataException("availableBalance is a required property for TapCapToken and cannot be null");
            }
            else
            {
                this.AvailableBalance = availableBalance;
            }
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new InvalidDataException("transactionId is a required property for TapCapToken and cannot be null");
            }
            else
            {
                this.TransactionId = transactionId;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for TapCapToken and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
        }
        
        /// <summary>
        /// Gets or Sets ClientAccount
        /// </summary>
        [DataMember(Name="clientAccount", EmitDefaultValue=false)]
        public string ClientAccount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableBalance
        /// </summary>
        [DataMember(Name="availableBalance", EmitDefaultValue=false)]
        public long? AvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public int? TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapToken {\n");
            sb.Append("  ClientAccount: ").Append(ClientAccount).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapToken);
        }

        /// <summary>
        /// Returns true if TapCapToken instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientAccount == input.ClientAccount ||
                    (this.ClientAccount != null &&
                    this.ClientAccount.Equals(input.ClientAccount))
                ) && 
                (
                    this.AvailableBalance == input.AvailableBalance ||
                    (this.AvailableBalance != null &&
                    this.AvailableBalance.Equals(input.AvailableBalance))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientAccount != null)
                    hashCode = hashCode * 59 + this.ClientAccount.GetHashCode();
                if (this.AvailableBalance != null)
                    hashCode = hashCode * 59 + this.AvailableBalance.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }
    }

}
