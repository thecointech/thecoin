/* 
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCap.Supplier.Client.OpenAPIDateConverter;

namespace TapCap.Supplier.Model
{
    /// <summary>
    /// TapCapClientRequest
    /// </summary>
    [DataContract]
    public partial class TapCapClientRequest :  IEquatable<TapCapClientRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapClientRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapClientRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapClientRequest" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="fiatAmount">fiatAmount (required).</param>
        /// <param name="currencyCode">currencyCode (required).</param>
        /// <param name="gpoData">gpoData (required).</param>
        /// <param name="cryptoData">cryptoData (required).</param>
        /// <param name="token">token (required).</param>
        public TapCapClientRequest(long? timestamp = default(long?), double? fiatAmount = default(double?), int? currencyCode = default(int?), byte[] gpoData = default(byte[]), byte[] cryptoData = default(byte[]), SignedMessage token = default(SignedMessage))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for TapCapClientRequest and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "fiatAmount" is required (not null)
            if (fiatAmount == null)
            {
                throw new InvalidDataException("fiatAmount is a required property for TapCapClientRequest and cannot be null");
            }
            else
            {
                this.FiatAmount = fiatAmount;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for TapCapClientRequest and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "gpoData" is required (not null)
            if (gpoData == null)
            {
                throw new InvalidDataException("gpoData is a required property for TapCapClientRequest and cannot be null");
            }
            else
            {
                this.GpoData = gpoData;
            }
            // to ensure "cryptoData" is required (not null)
            if (cryptoData == null)
            {
                throw new InvalidDataException("cryptoData is a required property for TapCapClientRequest and cannot be null");
            }
            else
            {
                this.CryptoData = cryptoData;
            }
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for TapCapClientRequest and cannot be null");
            }
            else
            {
                this.Token = token;
            }
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets FiatAmount
        /// </summary>
        [DataMember(Name="fiatAmount", EmitDefaultValue=false)]
        public double? FiatAmount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public int? CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets GpoData
        /// </summary>
        [DataMember(Name="gpoData", EmitDefaultValue=false)]
        public byte[] GpoData { get; set; }

        /// <summary>
        /// Gets or Sets CryptoData
        /// </summary>
        [DataMember(Name="cryptoData", EmitDefaultValue=false)]
        public byte[] CryptoData { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public SignedMessage Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapClientRequest {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FiatAmount: ").Append(FiatAmount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  GpoData: ").Append(GpoData).Append("\n");
            sb.Append("  CryptoData: ").Append(CryptoData).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapClientRequest);
        }

        /// <summary>
        /// Returns true if TapCapClientRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapClientRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapClientRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.FiatAmount == input.FiatAmount ||
                    (this.FiatAmount != null &&
                    this.FiatAmount.Equals(input.FiatAmount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.GpoData == input.GpoData ||
                    (this.GpoData != null &&
                    this.GpoData.Equals(input.GpoData))
                ) && 
                (
                    this.CryptoData == input.CryptoData ||
                    (this.CryptoData != null &&
                    this.CryptoData.Equals(input.CryptoData))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.FiatAmount != null)
                    hashCode = hashCode * 59 + this.FiatAmount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.GpoData != null)
                    hashCode = hashCode * 59 + this.GpoData.GetHashCode();
                if (this.CryptoData != null)
                    hashCode = hashCode * 59 + this.CryptoData.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                return hashCode;
            }
        }
    }

}
