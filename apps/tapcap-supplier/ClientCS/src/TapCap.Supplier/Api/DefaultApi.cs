/* 
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using TapCap.Supplier.Client;
using TapCap.Supplier.Model;

namespace TapCap.Supplier.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Notify of a contested transaction
        /// </summary>
        /// <remarks>
        /// Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>ContestResponse</returns>
        ContestResponse ContestTapCap (SignedTapcapContest signedTapcapContest);

        /// <summary>
        /// Notify of a contested transaction
        /// </summary>
        /// <remarks>
        /// Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>ApiResponse of ContestResponse</returns>
        ApiResponse<ContestResponse> ContestTapCapWithHttpInfo (SignedTapcapContest signedTapcapContest);
        /// <summary>
        /// Get the list of static responses to cache for terminal queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StaticResponses</returns>
        StaticResponses GetStatic ();

        /// <summary>
        /// Get the list of static responses to cache for terminal queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StaticResponses</returns>
        ApiResponse<StaticResponses> GetStaticWithHttpInfo ();
        /// <summary>
        /// Do TapCap transaction
        /// </summary>
        /// <remarks>
        /// This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>SignedMessage</returns>
        SignedMessage RequestTapCap (SignedMessage signedMessage);

        /// <summary>
        /// Do TapCap transaction
        /// </summary>
        /// <remarks>
        /// This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>ApiResponse of SignedMessage</returns>
        ApiResponse<SignedMessage> RequestTapCapWithHttpInfo (SignedMessage signedMessage);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Notify of a contested transaction
        /// </summary>
        /// <remarks>
        /// Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>Task of ContestResponse</returns>
        System.Threading.Tasks.Task<ContestResponse> ContestTapCapAsync (SignedTapcapContest signedTapcapContest);

        /// <summary>
        /// Notify of a contested transaction
        /// </summary>
        /// <remarks>
        /// Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>Task of ApiResponse (ContestResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContestResponse>> ContestTapCapAsyncWithHttpInfo (SignedTapcapContest signedTapcapContest);
        /// <summary>
        /// Get the list of static responses to cache for terminal queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StaticResponses</returns>
        System.Threading.Tasks.Task<StaticResponses> GetStaticAsync ();

        /// <summary>
        /// Get the list of static responses to cache for terminal queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StaticResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaticResponses>> GetStaticAsyncWithHttpInfo ();
        /// <summary>
        /// Do TapCap transaction
        /// </summary>
        /// <remarks>
        /// This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>Task of SignedMessage</returns>
        System.Threading.Tasks.Task<SignedMessage> RequestTapCapAsync (SignedMessage signedMessage);

        /// <summary>
        /// Do TapCap transaction
        /// </summary>
        /// <remarks>
        /// This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </remarks>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>Task of ApiResponse (SignedMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignedMessage>> RequestTapCapAsyncWithHttpInfo (SignedMessage signedMessage);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private TapCap.Supplier.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new TapCap.Supplier.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TapCap.Supplier.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(TapCap.Supplier.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TapCap.Supplier.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TapCap.Supplier.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TapCap.Supplier.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TapCap.Supplier.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Notify of a contested transaction Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>ContestResponse</returns>
        public ContestResponse ContestTapCap (SignedTapcapContest signedTapcapContest)
        {
             ApiResponse<ContestResponse> localVarResponse = ContestTapCapWithHttpInfo(signedTapcapContest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Notify of a contested transaction Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>ApiResponse of ContestResponse</returns>
        public ApiResponse< ContestResponse > ContestTapCapWithHttpInfo (SignedTapcapContest signedTapcapContest)
        {
            // verify the required parameter 'signedTapcapContest' is set
            if (signedTapcapContest == null)
                throw new ApiException(400, "Missing required parameter 'signedTapcapContest' when calling DefaultApi->ContestTapCap");

            var localVarPath = "./contest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yaml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yaml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signedTapcapContest != null && signedTapcapContest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signedTapcapContest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signedTapcapContest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContestTapCap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ContestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContestResponse)));
        }

        /// <summary>
        /// Notify of a contested transaction Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>Task of ContestResponse</returns>
        public async System.Threading.Tasks.Task<ContestResponse> ContestTapCapAsync (SignedTapcapContest signedTapcapContest)
        {
             ApiResponse<ContestResponse> localVarResponse = await ContestTapCapAsyncWithHttpInfo(signedTapcapContest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Notify of a contested transaction Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedTapcapContest">TapCap exchange request</param>
        /// <returns>Task of ApiResponse (ContestResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContestResponse>> ContestTapCapAsyncWithHttpInfo (SignedTapcapContest signedTapcapContest)
        {
            // verify the required parameter 'signedTapcapContest' is set
            if (signedTapcapContest == null)
                throw new ApiException(400, "Missing required parameter 'signedTapcapContest' when calling DefaultApi->ContestTapCap");

            var localVarPath = "./contest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yaml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yaml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signedTapcapContest != null && signedTapcapContest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signedTapcapContest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signedTapcapContest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ContestTapCap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContestResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ContestResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContestResponse)));
        }

        /// <summary>
        /// Get the list of static responses to cache for terminal queries 
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StaticResponses</returns>
        public StaticResponses GetStatic ()
        {
             ApiResponse<StaticResponses> localVarResponse = GetStaticWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of static responses to cache for terminal queries 
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StaticResponses</returns>
        public ApiResponse< StaticResponses > GetStaticWithHttpInfo ()
        {

            var localVarPath = "./static";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yaml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StaticResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticResponses)));
        }

        /// <summary>
        /// Get the list of static responses to cache for terminal queries 
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StaticResponses</returns>
        public async System.Threading.Tasks.Task<StaticResponses> GetStaticAsync ()
        {
             ApiResponse<StaticResponses> localVarResponse = await GetStaticAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of static responses to cache for terminal queries 
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StaticResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StaticResponses>> GetStaticAsyncWithHttpInfo ()
        {

            var localVarPath = "./static";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yaml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StaticResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (StaticResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StaticResponses)));
        }

        /// <summary>
        /// Do TapCap transaction This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>SignedMessage</returns>
        public SignedMessage RequestTapCap (SignedMessage signedMessage)
        {
             ApiResponse<SignedMessage> localVarResponse = RequestTapCapWithHttpInfo(signedMessage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Do TapCap transaction This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>ApiResponse of SignedMessage</returns>
        public ApiResponse< SignedMessage > RequestTapCapWithHttpInfo (SignedMessage signedMessage)
        {
            // verify the required parameter 'signedMessage' is set
            if (signedMessage == null)
                throw new ApiException(400, "Missing required parameter 'signedMessage' when calling DefaultApi->RequestTapCap");

            var localVarPath = "./tap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yaml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yaml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signedMessage != null && signedMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signedMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signedMessage; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestTapCap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignedMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SignedMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignedMessage)));
        }

        /// <summary>
        /// Do TapCap transaction This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>Task of SignedMessage</returns>
        public async System.Threading.Tasks.Task<SignedMessage> RequestTapCapAsync (SignedMessage signedMessage)
        {
             ApiResponse<SignedMessage> localVarResponse = await RequestTapCapAsyncWithHttpInfo(signedMessage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Do TapCap transaction This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal
        /// </summary>
        /// <exception cref="TapCap.Supplier.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <returns>Task of ApiResponse (SignedMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignedMessage>> RequestTapCapAsyncWithHttpInfo (SignedMessage signedMessage)
        {
            // verify the required parameter 'signedMessage' is set
            if (signedMessage == null)
                throw new ApiException(400, "Missing required parameter 'signedMessage' when calling DefaultApi->RequestTapCap");

            var localVarPath = "./tap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/yaml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/yaml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signedMessage != null && signedMessage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signedMessage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signedMessage; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestTapCap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignedMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (SignedMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignedMessage)));
        }

    }
}
