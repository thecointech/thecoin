/*
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using TapCapSupplier.Card;
using TapCapSupplier.Models;
using TapCapSupplier.TapCap;

namespace TapCapSupplier.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("[controller]")]
    public class TransactionController : ControllerBase
    {
		private HandleTx handler;
		private IEmvCard card;
		private Logger logger = LogManager.GetCurrentClassLogger();
		public TransactionController(HandleTx handler, IEmvCard card)
		{
			this.handler = handler;
			this.card = card;
		}

		///// <summary>
		///// Notify of a contested transaction
		///// </summary>
		///// <remarks>Notify supplier that the client will contest the passed transaction.  This is not necessary, a supplier should auotomatically undo any incompelete transactions, but it is a courtesy to the supplier</remarks>
		///// <param name="signedTapcapContest">TapCap exchange request</param>
		///// <response code="200">Server status</response>
		///// <response code="405">Invalid input</response>
		//[HttpPost]
  //      public virtual IActionResult ContestTapCap([FromBody]SignedTapcapContest signedTapcapContest)
  //      { 
  //          string exampleJson = null;
  //          exampleJson = "{\r\n  \"code\" : 0\r\n}";
            
  //          var example = exampleJson != null
  //          ? JsonConvert.DeserializeObject<ContestResponse>(exampleJson)
  //          : default;
  //          return new ObjectResult(example);
  //      }

        /// <summary>
        /// Get the list of static responses to cache for terminal queries
        /// </summary>
        /// <param name="signedMessage">Static data request</param>
        /// <response code="200">Static response cache</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
		[Route("[action]")]
		public virtual StaticResponses GetStatic([FromBody]SignedMessage signedMessage)
        {
			logger.Debug("Querying Static");
			return card.StaticResponses;
        }

        /// <summary>
        /// Query the server for a single message if it is unknown
        /// </summary>
        /// <param name="queryWithHistory">Static data request</param>
        /// <response code="200">Static response cache</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
		[Route("[action]")]
		public virtual byte[] GetStaticSingle([FromBody]QueryWithHistory queryWithHistory)
        {
			logger.Debug("Querying StaticSingle");
			return card.GetSingleResponse(queryWithHistory);
        }

        /// <summary>
        /// Request TapCap transaction
        /// </summary>
        /// <remarks>This is sent in response to a terminal request.  The supplier is expected to return a valid certificate to pass to the terminal</remarks>
        /// <param name="signedMessage">TapCap exchange request</param>
        /// <response code="200">Info required to complete the transaction, including coin charged, and the data to be returned to the teriminal</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
		[Route("[action]")]
		public virtual TapCapBrokerPurchase RequestTapCap(TapCapClientRequest request)
        {
			logger.Debug("Requesting Transaction");
			return handler.RequestTransaction(request);
        }
    }
}
