/*
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TapCapSupplier.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TapCapBrokerPurchase : IEquatable<TapCapBrokerPurchase>
    { 
        /// <summary>
        /// Gets or Sets SignedRequest
        /// </summary>
        [Required]
        [DataMember(Name="signedRequest")]
        public SignedMessage SignedRequest { get; set; }

        /// <summary>
        /// Gets or Sets FxRate
        /// </summary>
        [Required]
        [DataMember(Name="FxRate")]
        public FXRate FxRate { get; set; }

        /// <summary>
        /// Gets or Sets CoinCharge
        /// </summary>
        [Required]
        [DataMember(Name="coinCharge")]
        public long? CoinCharge { get; set; }

        /// <summary>
        /// Gets or Sets CryptoCertificate
        /// </summary>
        [Required]
        [DataMember(Name="cryptoCertificate")]
        public byte[] CryptoCertificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapBrokerPurchase {\n");
            sb.Append("  SignedRequest: ").Append(SignedRequest).Append("\n");
            sb.Append("  FxRate: ").Append(FxRate).Append("\n");
            sb.Append("  CoinCharge: ").Append(CoinCharge).Append("\n");
            sb.Append("  CryptoCertificate: ").Append(CryptoCertificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TapCapBrokerPurchase)obj);
        }

        /// <summary>
        /// Returns true if TapCapBrokerPurchase instances are equal
        /// </summary>
        /// <param name="other">Instance of TapCapBrokerPurchase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapBrokerPurchase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SignedRequest == other.SignedRequest ||
                    SignedRequest != null &&
                    SignedRequest.Equals(other.SignedRequest)
                ) && 
                (
                    FxRate == other.FxRate ||
                    FxRate != null &&
                    FxRate.Equals(other.FxRate)
                ) && 
                (
                    CoinCharge == other.CoinCharge ||
                    CoinCharge != null &&
                    CoinCharge.Equals(other.CoinCharge)
                ) && 
                (
                    CryptoCertificate == other.CryptoCertificate ||
                    CryptoCertificate != null &&
                    CryptoCertificate.Equals(other.CryptoCertificate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SignedRequest != null)
                    hashCode = hashCode * 59 + SignedRequest.GetHashCode();
                    if (FxRate != null)
                    hashCode = hashCode * 59 + FxRate.GetHashCode();
                    if (CoinCharge != null)
                    hashCode = hashCode * 59 + CoinCharge.GetHashCode();
                    if (CryptoCertificate != null)
                    hashCode = hashCode * 59 + CryptoCertificate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TapCapBrokerPurchase left, TapCapBrokerPurchase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TapCapBrokerPurchase left, TapCapBrokerPurchase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
