/*
 * THE TapCap supply
 *
 * The interace for TapCap between buyers & sellers.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TapCapSupplier.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FXRate : IEquatable<FXRate>
    { 
        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target")]
        public int? Target { get; set; }

        /// <summary>
        /// Gets or Sets Buy
        /// </summary>
        [Required]
        [DataMember(Name="buy")]
        public double? Buy { get; set; }

        /// <summary>
        /// Gets or Sets Sell
        /// </summary>
        [Required]
        [DataMember(Name="sell")]
        public double? Sell { get; set; }

        /// <summary>
        /// Gets or Sets _FxRate
        /// </summary>
        [Required]
        [DataMember(Name="fxRate")]
        public double? _FxRate { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [Required]
        [DataMember(Name="validFrom")]
        public long? ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ValidTill
        /// </summary>
        [Required]
        [DataMember(Name="validTill")]
        public long? ValidTill { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FXRate {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Buy: ").Append(Buy).Append("\n");
            sb.Append("  Sell: ").Append(Sell).Append("\n");
            sb.Append("  _FxRate: ").Append(_FxRate).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTill: ").Append(ValidTill).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FXRate)obj);
        }

        /// <summary>
        /// Returns true if FXRate instances are equal
        /// </summary>
        /// <param name="other">Instance of FXRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FXRate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Target == other.Target ||
                    Target != null &&
                    Target.Equals(other.Target)
                ) && 
                (
                    Buy == other.Buy ||
                    Buy != null &&
                    Buy.Equals(other.Buy)
                ) && 
                (
                    Sell == other.Sell ||
                    Sell != null &&
                    Sell.Equals(other.Sell)
                ) && 
                (
                    _FxRate == other._FxRate ||
                    _FxRate != null &&
                    _FxRate.Equals(other._FxRate)
                ) && 
                (
                    ValidFrom == other.ValidFrom ||
                    ValidFrom != null &&
                    ValidFrom.Equals(other.ValidFrom)
                ) && 
                (
                    ValidTill == other.ValidTill ||
                    ValidTill != null &&
                    ValidTill.Equals(other.ValidTill)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Target != null)
                    hashCode = hashCode * 59 + Target.GetHashCode();
                    if (Buy != null)
                    hashCode = hashCode * 59 + Buy.GetHashCode();
                    if (Sell != null)
                    hashCode = hashCode * 59 + Sell.GetHashCode();
                    if (_FxRate != null)
                    hashCode = hashCode * 59 + _FxRate.GetHashCode();
                    if (ValidFrom != null)
                    hashCode = hashCode * 59 + ValidFrom.GetHashCode();
                    if (ValidTill != null)
                    hashCode = hashCode * 59 + ValidTill.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FXRate left, FXRate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FXRate left, FXRate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
