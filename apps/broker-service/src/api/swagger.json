{
	"basePath": "/api/v1",
	"consumes": [
		"application/json"
	],
	"definitions": {
		"CertifiedTransferRequest": {
			"properties": {
				"from": {
					"type": "string"
				},
				"to": {
					"type": "string"
				},
				"value": {
					"type": "number",
					"format": "double"
				},
				"fee": {
					"type": "number",
					"format": "double"
				},
				"timestamp": {
					"type": "number",
					"format": "double"
				},
				"signature": {
					"type": "string"
				}
			},
			"required": [
				"from",
				"to",
				"value",
				"fee",
				"timestamp",
				"signature"
			],
			"type": "object",
			"additionalProperties": false
		},
		"EncryptedPacket": {
			"properties": {
				"encryptedPacket": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			},
			"required": [
				"encryptedPacket",
				"version"
			],
			"type": "object",
			"additionalProperties": false
		},
		"CertifiedTransfer": {
			"properties": {
				"transfer": {
					"$ref": "#/definitions/CertifiedTransferRequest"
				},
				"instructionPacket": {
					"$ref": "#/definitions/EncryptedPacket"
				},
				"signature": {
					"type": "string"
				}
			},
			"required": [
				"transfer",
				"instructionPacket",
				"signature"
			],
			"type": "object",
			"additionalProperties": false
		},
		"eTransferCodeResponse": {
			"properties": {
				"code": {
					"type": "string",
					"x-nullable": true
				},
				"error": {
					"type": "string",
					"x-nullable": true
				}
			},
			"type": "object",
			"additionalProperties": false
		},
		"SignedMessage": {
			"properties": {
				"message": {
					"type": "string"
				},
				"signature": {
					"type": "string"
				}
			},
			"required": [
				"message",
				"signature"
			],
			"type": "object",
			"additionalProperties": false
		},
		"SubscriptionDetails": {
			"description": "This file was auto-generated by swagger-to-ts.\nDo not make direct changes to the file.",
			"properties": {
				"id": {
					"type": "string",
					"x-nullable": true
				},
				"email": {
					"type": "string",
					"x-nullable": true
				},
				"confirmed": {
					"type": "boolean",
					"x-nullable": true
				},
				"firstName": {
					"type": "string",
					"x-nullable": true
				},
				"lastName": {
					"type": "string",
					"x-nullable": true
				},
				"country": {
					"type": "string",
					"x-nullable": true
				},
				"city": {
					"type": "string",
					"x-nullable": true
				}
			},
			"type": "object",
			"additionalProperties": false
		},
		"BoolResponse": {
			"properties": {
				"success": {
					"type": "boolean",
					"x-nullable": true
				}
			},
			"type": "object",
			"additionalProperties": false
		},
		"NewAccountReferal": {
			"properties": {
				"referrerId": {
					"type": "string"
				},
				"newAccount": {
					"type": "string"
				}
			},
			"required": [
				"referrerId",
				"newAccount"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleAuthUrl": {
			"properties": {
				"url": {
					"type": "string"
				}
			},
			"required": [
				"url"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleFileIdent": {
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string",
					"x-nullable": true
				},
				"type": {
					"type": "string",
					"x-nullable": true
				}
			},
			"required": [
				"id"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleListResult": {
			"properties": {
				"wallets": {
					"items": {
						"$ref": "#/definitions/GoogleFileIdent"
					},
					"type": "array"
				}
			},
			"required": [
				"wallets"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleToken": {
			"properties": {
				"token": {
					"type": "string"
				}
			},
			"required": [
				"token"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleStoreAccount": {
			"properties": {
				"token": {
					"$ref": "#/definitions/GoogleToken"
				},
				"wallet": {
					"type": "string"
				},
				"walletName": {
					"type": "string"
				}
			},
			"required": [
				"token",
				"wallet",
				"walletName"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleWalletItem": {
			"properties": {
				"id": {
					"$ref": "#/definitions/GoogleFileIdent"
				},
				"wallet": {
					"type": "string",
					"x-nullable": true
				}
			},
			"required": [
				"id"
			],
			"type": "object",
			"additionalProperties": false
		},
		"GoogleGetResult": {
			"properties": {
				"wallets": {
					"items": {
						"$ref": "#/definitions/GoogleWalletItem"
					},
					"type": "array"
				}
			},
			"required": [
				"wallets"
			],
			"type": "object",
			"additionalProperties": false
		},
		"CertifiedTransferResponse": {
			"properties": {
				"message": {
					"type": "string"
				},
				"txHash": {
					"type": "string"
				}
			},
			"required": [
				"message",
				"txHash"
			],
			"type": "object",
			"additionalProperties": false
		}
	},
	"info": {
		"title": "@the-coin/broker-service",
		"version": "0.1.1",
		"description": "TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies",
		"license": {
			"name": "MIT"
		}
	},
	"paths": {
		"/bills/payment": {
			"post": {
				"operationId": "BillPayment",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The response confirms to the user the order has been processed"
					},
					"204": {
						"description": "No content"
					},
					"400": {
						"description": "Bad request"
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Bill Payment\nCalled by the client to pay a bill with coin via a certified transfer\nMust contain a transfer to this brokers address, and an encrypted BillPayeePacket\n\nrequest CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket\nreturns CertifiedTransferResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CertifiedTransfer"
						}
					}
				]
			}
		},
		"/exchange/eTransfer": {
			"post": {
				"operationId": "ETransfer",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "The response confirms to the user the order has been processed"
					},
					"204": {
						"description": "No content"
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Request eTransfer    \nCalled by the client to exchange coin for CAD and send via eTransfer\n\nrequest CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted ETransferPacket\nreturns CertifiedTransferResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CertifiedTransfer"
						}
					}
				]
			}
		},
		"/exchange/eTransfer/code": {
			"put": {
				"operationId": "ETransferInCode",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/eTransferCodeResponse"
						}
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Required answer for eTransfer sent to this broker\nA code unique to the user that is required on all eTransfers sent in to this broker\n\nrequest SignedMessage Signed timestamp message\nreturns eTransferCodeResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SignedMessage"
						}
					}
				]
			}
		},
		"/newsletter/details": {
			"get": {
				"operationId": "NewsletterDetails",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/SubscriptionDetails"
						}
					},
					"400": {
						"description": "Not Found"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"description": "Get subscription details.\n\nid String \nreturns SubscriptionDetails",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "id",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/newsletter/unsubscribe": {
			"get": {
				"operationId": "NewsletterUnsubscribe",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/BoolResponse"
						}
					},
					"400": {
						"description": "Not Found"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"description": "Unsubscribe an email address from our newsletter.\n\nid String \nreturns BoolResponse",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "id",
						"required": true,
						"type": "string"
					}
				]
			}
		},
		"/newsletter/confirm": {
			"put": {
				"operationId": "NewsletterConfirm",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/SubscriptionDetails"
						}
					},
					"400": {
						"description": "Not Found"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"description": "Confirm email subscription.\n\ndetails SubscriptionDetails \nreturns BoolResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "details",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SubscriptionDetails"
						}
					}
				]
			}
		},
		"/newsletter/signup": {
			"post": {
				"operationId": "NewsletterSignup",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/BoolResponse"
						}
					},
					"400": {
						"description": "Not Found"
					},
					"500": {
						"description": "Server Error"
					}
				},
				"description": "Register an email address for our newsletter.\n\nemail SubscriptionDetails  \nreturns BoolResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "details",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SubscriptionDetails"
						}
					}
				]
			}
		},
		"/referrers": {
			"get": {
				"operationId": "ReferrerValid",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/BoolResponse"
						}
					},
					"405": {
						"description": "Server Error"
					}
				},
				"description": "Returns a boolean indicating whether the passed referrer is valid\n\nReferrers ID: This ID must have been previously registered with the system",
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "referrerId",
						"required": true,
						"type": "string"
					}
				]
			},
			"post": {
				"operationId": "ReferralCreate",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/BoolResponse"
						}
					},
					"405": {
						"description": "Server Error"
					}
				},
				"description": "Set referal for new account\n\nNewAccountReferal: This referral must have been previously registered with the system",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "referral",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NewAccountReferal"
						}
					}
				]
			}
		},
		"/secure/google": {
			"get": {
				"operationId": "GoogleAuthUrl",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/GoogleAuthUrl"
						}
					},
					"400": {
						"description": "Bad request"
					}
				},
				"description": "Get the authorization URL to redirect the user to\n\nreturns GoogleAuthUrl",
				"security": [],
				"parameters": []
			}
		},
		"/secure/google/list": {
			"put": {
				"operationId": "GoogleList",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/GoogleListResult"
						}
					},
					"405": {
						"description": "Permission Denied"
					}
				},
				"description": "Get the listing of available accounts\n\ntoken GoogleToken \nreturns GoogleListResult",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "token",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GoogleToken"
						}
					}
				]
			}
		},
		"/secure/google/put": {
			"put": {
				"operationId": "GooglePut",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/BoolResponse"
						}
					},
					"405": {
						"description": "Permission Denied"
					}
				},
				"description": "Store on google drive\n\naccount GoogleUploadPacket \nreturns BoolResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "account",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GoogleStoreAccount"
						}
					}
				]
			}
		},
		"/secure/google/get": {
			"put": {
				"operationId": "GoogleRetrieve",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/GoogleGetResult"
						}
					}
				},
				"description": "Retrieve previously-stored file from google drive\n\ntoken GoogleToken \nreturns GoogleGetResult",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GoogleToken"
						}
					}
				]
			}
		},
		"/status": {
			"get": {
				"operationId": "Status",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"additionalProperties": true,
							"type": "object"
						}
					}
				},
				"description": "Returns info like brokers address, available balance, etc (?)\nGets the operating status of the broker",
				"security": [],
				"parameters": []
			}
		},
		"/transfer": {
			"post": {
				"operationId": "Transfer",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "Ok",
						"schema": {
							"$ref": "#/definitions/CertifiedTransferResponse"
						}
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Transfer to another The Coin account\nA client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether\n\nrequest CertifiedTransferRequest A request appropriately filled out and signed as described in the comments\nreturns CertifiedTransferResponse",
				"security": [],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CertifiedTransferRequest"
						}
					}
				]
			}
		}
	},
	"produces": [
		"application/json"
	],
	"swagger": "2.0",
	"securityDefinitions": {}
}