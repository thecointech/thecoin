{"src":"// ----------------------------------------------------------------------------\n/// @title RoundNumber demo plugin\n/// @author Stephen Taylor\n/// @notice A simple plugin intended to test plugin funtionality.\n/// Rounds the users balance down to the nearest $100 in fiat\n/// @dev This is a sample plugin and not intended for production\n// ----------------------------------------------------------------------------\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.0;\n\nimport './BasePlugin.sol';\nimport '../interfaces/permissions.sol';\nimport '@thecointech/contract-oracle/contracts/OracleClient.sol';\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ncontract RoundNumber is BasePlugin, OracleClient, Ownable, PermissionUser {\n\n  constructor(address oracle) {\n    setFeed(oracle);\n  }\n\n  // Round to the nearest $100 (10K cents)\n  int constant ROUND_POINT = 10000;\n\n  // We modify the users balance to reflect what they can actually spend.\n  // When a withdrawal occurs we may boost the\n  function getPermissions() override external pure returns(uint) {\n    return PERMISSION_BALANCE;\n  }\n\n  function balanceOf(address /*user*/, int currentBalance) external view override returns(int){\n    // Fiat is in cents\n    int fiat = toFiat(currentBalance, block.timestamp);\n    int rounded = (fiat / ROUND_POINT) * ROUND_POINT;\n    return toCoin(rounded, block.timestamp);\n  }\n}\n\n"}