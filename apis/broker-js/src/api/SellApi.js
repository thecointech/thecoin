/**
 * THE Coin Broker Sample
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertifiedSale from '../model/CertifiedSale';
import SellResponse from '../model/SellResponse';
import SignedMessage from '../model/SignedMessage';

/**
* Sell service.
* @module api/SellApi
* @version 0.1.2
*/
export default class SellApi {

    /**
    * Constructs a new SellApi. 
    * @alias module:api/SellApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Request coin sale
     * Called by the client to exchange coin for CAD using a certified transfer
     * @param {module:model/CertifiedSale} certifiedSale Signed certified transfer to this brokers address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellResponse} and HTTP response
     */
    certifiedCoinSaleWithHttpInfo(certifiedSale) {
      let postBody = certifiedSale;

      // verify the required parameter 'certifiedSale' is set
      if (certifiedSale === undefined || certifiedSale === null) {
        throw new Error("Missing the required parameter 'certifiedSale' when calling certifiedCoinSale");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellResponse;

      return this.apiClient.callApi(
        '/exchange/sell/certified', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Request coin sale
     * Called by the client to exchange coin for CAD using a certified transfer
     * @param {module:model/CertifiedSale} certifiedSale Signed certified transfer to this brokers address
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SellResponse}
     */
    certifiedCoinSale(certifiedSale) {
      return this.certifiedCoinSaleWithHttpInfo(certifiedSale)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mark coin sale complete
     * Called by the client to exchange coin for CAD
     * @param {String} user User address
     * @param {Number} id Id of purchase order to return
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellResponse} and HTTP response
     */
    completeCoinSaleWithHttpInfo(user, id, signedMessage) {
      let postBody = signedMessage;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling completeCoinSale");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling completeCoinSale");
      }

      // verify the required parameter 'signedMessage' is set
      if (signedMessage === undefined || signedMessage === null) {
        throw new Error("Missing the required parameter 'signedMessage' when calling completeCoinSale");
      }


      let pathParams = {
        'user': user,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellResponse;

      return this.apiClient.callApi(
        '/exchange/sell/{user}/{id}/complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Mark coin sale complete
     * Called by the client to exchange coin for CAD
     * @param {String} user User address
     * @param {Number} id Id of purchase order to return
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SellResponse}
     */
    completeCoinSale(user, id, signedMessage) {
      return this.completeCoinSaleWithHttpInfo(user, id, signedMessage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Request coin sale
     * Called by the client to exchange coin for CAD
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SellResponse} and HTTP response
     */
    requestCoinSaleWithHttpInfo(signedMessage) {
      let postBody = signedMessage;

      // verify the required parameter 'signedMessage' is set
      if (signedMessage === undefined || signedMessage === null) {
        throw new Error("Missing the required parameter 'signedMessage' when calling requestCoinSale");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SellResponse;

      return this.apiClient.callApi(
        '/exchange/sell/initiate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Request coin sale
     * Called by the client to exchange coin for CAD
     * @param {module:model/SignedMessage} signedMessage Signed sell order request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SellResponse}
     */
    requestCoinSale(signedMessage) {
      return this.requestCoinSaleWithHttpInfo(signedMessage)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
