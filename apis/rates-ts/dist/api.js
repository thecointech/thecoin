"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * TheCoin Core
 * TheCoin pricing service.  Published by TheCoin Tech
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = "https://thecoincore-212314.appspot.com".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
    }
}
exports.RequiredError = RequiredError;
/**
 * RatesApi - fetch parameter creator
 * @export
 */
exports.RatesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Query exchange rate for THE into the given currency
         * @summary Exchange Rate
         * @param {number} currencyCode The integer code for the countries currency
         * @param {number} timestamp The timestamp we are requesting valid values for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversion(currencyCode, timestamp, options = {}) {
            // verify required parameter 'currencyCode' is not null or undefined
            if (currencyCode === null || currencyCode === undefined) {
                throw new RequiredError('currencyCode', 'Required parameter currencyCode was null or undefined when calling getConversion.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp', 'Required parameter timestamp was null or undefined when calling getConversion.');
            }
            const localVarPath = `/rates/{currencyCode}`
                .replace(`{${"currencyCode"}}`, encodeURIComponent(String(currencyCode)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RatesApi - functional programming interface
 * @export
 */
exports.RatesApiFp = function (configuration) {
    return {
        /**
         * Query exchange rate for THE into the given currency
         * @summary Exchange Rate
         * @param {number} currencyCode The integer code for the countries currency
         * @param {number} timestamp The timestamp we are requesting valid values for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversion(currencyCode, timestamp, options) {
            const localVarFetchArgs = exports.RatesApiFetchParamCreator(configuration).getConversion(currencyCode, timestamp, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RatesApi - factory interface
 * @export
 */
exports.RatesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Query exchange rate for THE into the given currency
         * @summary Exchange Rate
         * @param {number} currencyCode The integer code for the countries currency
         * @param {number} timestamp The timestamp we are requesting valid values for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversion(currencyCode, timestamp, options) {
            return exports.RatesApiFp(configuration).getConversion(currencyCode, timestamp, options)(fetch, basePath);
        },
    };
};
/**
 * RatesApi - object-oriented interface
 * @export
 * @class RatesApi
 * @extends {BaseAPI}
 */
class RatesApi extends BaseAPI {
    /**
     * Query exchange rate for THE into the given currency
     * @summary Exchange Rate
     * @param {number} currencyCode The integer code for the countries currency
     * @param {number} timestamp The timestamp we are requesting valid values for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    getConversion(currencyCode, timestamp, options) {
        return exports.RatesApiFp(this.configuration).getConversion(currencyCode, timestamp, options)(this.fetch, this.basePath);
    }
}
exports.RatesApi = RatesApi;
