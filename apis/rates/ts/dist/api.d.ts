/**
 * TheCoin Core
 * TheCoin pricing service.  Published by TheCoin Tech
 *
 * OpenAPI spec version: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface FXRate
 */
export interface FXRate {
    /**
     *
     * @type {number}
     * @memberof FXRate
     */
    target?: number;
    /**
     *
     * @type {number}
     * @memberof FXRate
     */
    buy: number;
    /**
     *
     * @type {number}
     * @memberof FXRate
     */
    sell: number;
    /**
     *
     * @type {number}
     * @memberof FXRate
     */
    fxRate: number;
    /**
     *
     * @type {number}
     * @memberof FXRate
     */
    validFrom: number;
    /**
     *
     * @type {number}
     * @memberof FXRate
     */
    validTill: number;
}
/**
 * RatesApi - fetch parameter creator
 * @export
 */
export declare const RatesApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Query exchange rate for THE into the given currency
     * @summary Exchange Rate
     * @param {number} currencyCode The integer code for the countries currency
     * @param {number} timestamp The timestamp we are requesting valid values for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversion(currencyCode: number, timestamp: number, options?: any): FetchArgs;
};
/**
 * RatesApi - functional programming interface
 * @export
 */
export declare const RatesApiFp: (configuration?: Configuration) => {
    /**
     * Query exchange rate for THE into the given currency
     * @summary Exchange Rate
     * @param {number} currencyCode The integer code for the countries currency
     * @param {number} timestamp The timestamp we are requesting valid values for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversion(currencyCode: number, timestamp: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FXRate>;
};
/**
 * RatesApi - factory interface
 * @export
 */
export declare const RatesApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Query exchange rate for THE into the given currency
     * @summary Exchange Rate
     * @param {number} currencyCode The integer code for the countries currency
     * @param {number} timestamp The timestamp we are requesting valid values for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversion(currencyCode: number, timestamp: number, options?: any): Promise<FXRate>;
};
/**
 * RatesApi - object-oriented interface
 * @export
 * @class RatesApi
 * @extends {BaseAPI}
 */
export declare class RatesApi extends BaseAPI {
    /**
     * Query exchange rate for THE into the given currency
     * @summary Exchange Rate
     * @param {number} currencyCode The integer code for the countries currency
     * @param {number} timestamp The timestamp we are requesting valid values for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    getConversion(currencyCode: number, timestamp: number, options?: any): Promise<FXRate>;
}
