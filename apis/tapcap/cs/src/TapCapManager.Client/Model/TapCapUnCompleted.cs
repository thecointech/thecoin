/* 
 * The TapCap Manager
 *
 * The TapCap resolution.  This service is the trusted 3rd party that weekly settles TapCap purchases
 *
 * OpenAPI spec version: 0.0.1
 * Contact: stephen.taylor.dev@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = TapCapManager.Client.Client.OpenAPIDateConverter;

namespace TapCapManager.Client.Model
{
    /// <summary>
    /// TapCapUnCompleted
    /// </summary>
    [DataContract]
    public partial class TapCapUnCompleted :  IEquatable<TapCapUnCompleted>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapUnCompleted" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TapCapUnCompleted() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TapCapUnCompleted" /> class.
        /// </summary>
        /// <param name="signedRequest">signedRequest (required).</param>
        /// <param name="signature">signature.</param>
        public TapCapUnCompleted(SignedMessage signedRequest = default(SignedMessage), string signature = default(string))
        {
            // to ensure "signedRequest" is required (not null)
            if (signedRequest == null)
            {
                throw new InvalidDataException("signedRequest is a required property for TapCapUnCompleted and cannot be null");
            }
            else
            {
                this.SignedRequest = signedRequest;
            }
            this.Signature = signature;
        }
        
        /// <summary>
        /// Gets or Sets SignedRequest
        /// </summary>
        [DataMember(Name="signedRequest", EmitDefaultValue=false)]
        public SignedMessage SignedRequest { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapCapUnCompleted {\n");
            sb.Append("  SignedRequest: ").Append(SignedRequest).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapCapUnCompleted);
        }

        /// <summary>
        /// Returns true if TapCapUnCompleted instances are equal
        /// </summary>
        /// <param name="input">Instance of TapCapUnCompleted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapCapUnCompleted input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignedRequest == input.SignedRequest ||
                    (this.SignedRequest != null &&
                    this.SignedRequest.Equals(input.SignedRequest))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignedRequest != null)
                    hashCode = hashCode * 59 + this.SignedRequest.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                return hashCode;
            }
        }
    }

}
