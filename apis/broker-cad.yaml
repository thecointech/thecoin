swagger: "2.0"
info:
  description: "TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies"
  version: "0.1.0"
  title: "THE Coin Broker Sample"
  contact:
    email: "stephen.taylor.dev@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "broker-cad.appspot.com"
tags:
- name: "eTransfer"
  description: "The Coin exchange service.  This API allows clients to exchange THESE for CAD"
- name: "Transfer"
  description: "Request the broker to make a transfer on the clients behalf"
- name: "Secure"
  description: "Functions to help secure an account"
consumes:
- "application/json"
produces:
- "application/json"
schemes:
- "https"

definitions:

  ############################################################

  # The message must be a signed JSON string, however
  # it is transmitted in string form to ensure the
  # differences in JSON parsing do not alter the signature
  SignedMessage:
    required:
      - message
      - signature
    properties:
      message:
        type: string
      signature:
        type: string

  CertifiedTransferRequest:
    required:
      - from
      - to
      - value
      - fee
      - timestamp
      - signature
    properties:
       # The address we transfer from
      from:
        type: string
      # the address we transfer to
      to:
        type: string
      # the amount THESE to transfer
      value:
        type: integer
      # the fee (in THESE) to be kept as part of the transfer
      fee:
        type: integer
      # the timestamp this message was signed at
      timestamp:
        type: integer
      # The signature is the following signed by {from}:
      # {from}->{to}\nval{value}\nfee{fee}\nts{timestamp}
      signature:
        type: string

  CertifiedTransferResponse:
    required:
      - message
      - txHash
    properties:
      # Some sort of message passed back(?)
      message:
        type: string
      # if the tx was submitted to the blockchain, this
      # parameter will contain the ID of the transaction
      # NOTE: This is returned before the tx is completed
      # so the user may well need to wait on the result
      txHash:
        type: string

  ############################################################

  # Encodes an arbitrary object into an encrypted form for encrypted-at-rest storage
  EncryptedPacket:
    required:
      - encryptedPacket
      - version
    properties:
      encryptedPacket:
        type: string
        # encrypted $ref: "#/definitions/BillPayeePacket"
      version:
        type: string

  CertifiedTransfer:
    required:
      - transfer
      - instructionPacket
      - signature
    properties:
      # Signed transfer request sending coin to the broker
      transfer:
        $ref: "#/definitions/CertifiedTransferRequest"
      # The transfer instructions, the type depends on
      # the operation being performed (Bill payment, eTransfer etc)
      instructionPacket:
        $ref: "#/definitions/EncryptedPacket"
      # Client must sign instruction + transfer.signature
      signature:
        type:
          string

  ############################################################

  # Do sale via certified request.  Sale includes token to
  # process transfer, and the email address the proceeds
  # are to be returned to.
  ETransferPacket:
    required:
      - email
      - question
      - answer
    properties:
      email:
        type:
          string
      question:
        type:
          string
      answer:
        type:
          string
      message:
        type:
          string

  eTransferCodeResponse:
    properties:
      code:
        type: string
      error:
        type: string

  # The minimum details required to pay this account
  BillPayeePacket:
    properties:
      payee:
        type: string
      accountNumber:
        type: string

  ############################################################
  #
  # Any general purpose info on the broker can be stored here.
  BrokerStatus:
    required:
      - address
      - certifiedFee
    properties:
      address:
        type: string
      # The broker must publicise it's fee for performing
      # certified transactions on behalf of the client
      certifiedFee:
        type: integer

  NewAccountReferal:
    required:
      - referrerId
      - newAccount
    properties:
      referrerId:
        type: string
      newAccount:
        type: string

  BoolResponse:
        title: A bool that to be returned indicating success/failure
        type: boolean
        properties:
          success:
            type: boolean

################################################################################

  GoogleAuthUrl:
    required:
      - url
    properties:
      url:
        type: string

  GoogleToken:
    required:
      - token
    properties:
      token:
        type: string

  GoogleStoreAccount:
    required:
      - token
      - wallet
      - walletName
    properties:
      token:
        $ref: "#/definitions/GoogleToken"
      wallet:
        type: string
      walletName:
        type: string

  GoogleFileIdent:
    required:
      - id
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string

  GoogleWalletItem:
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/GoogleFileIdent"
      wallet:
        type: string

  GoogleListResult:
    required:
      - wallets
    properties:
      wallets:
        type: array
        items:
          $ref: "#/definitions/GoogleFileIdent"

  GoogleGetResult:
    required:
      - wallets
    properties:
      wallets:
        type: array
        items:
          $ref: "#/definitions/GoogleWalletItem"

################################################################################

  SubscriptionDetails:
    properties:
      id:
        type: string
      email:
        type: string
      confirmed:
        type: boolean
      firstName:
        type: string
      lastName:
        type: string
      country:
        type: string
      city:
        type: string

################################################################################

paths:
  /status:
    get:
      tags:
        - Status
      summary: "Gets the operating status of the broker"
      description: "Returns info like brokers address, available balance, etc (?)"
      operationId: "status"
      responses:
        405:
          description: "Server Error"
        200:
          description: Server status
          schema:
            $ref: "#/definitions/BrokerStatus"


  /referrers:
    get:
      tags:
        - Referrers
      summary: "Gets the validity of the passed referrer"
      description: "Returns a boolean indicating whether the passed referrer is valid"
      operationId: "referrerValid"
      parameters:
        - name: referrer
          in: query
          required: true
          description: Referrers ID.  This ID must have been previously registered with the system
          type: string
      responses:
        405:
          description: "Server Error"
        200:
          description: Id Valid
          schema:
            $ref: "#/definitions/BoolResponse"

    post:
      tags:
        - Referrers
      summary: "Register the referral of new account"
      description: "Returns a boolean indicating whether the passed referrer is valid"
      operationId: "referralCreate"
      parameters:
        - in: body
          name: referral
          description: "Set referal for new account"
          required: true
          schema:
            $ref: "#/definitions/NewAccountReferal"
      responses:
        405:
          description: "Server Error"
        200:
          description: Referral success
          schema:
            $ref: "#/definitions/BoolResponse"

  #############################################################

  /exchange/eTransfer:
    post:
      tags:
        - eTransfer
      summary: "Request eTransfer"
      description: "Called by the client to exchange coin for CAD and send via eTransfer"
      operationId: "eTransfer"
      responses:
        405:
          description: "Invalid input"
        200:
          description: The response confirms to the user the order has been processed
          schema:
            $ref: "#/definitions/CertifiedTransferResponse"
      parameters:
        - in: body
          name: request
          description: "Must contain a transfer to this brokers address, and an encrypted ETransferPacket"
          required: true
          schema:
            $ref: "#/definitions/CertifiedTransfer"

  /exchange/eTransfer/code:
    put:
      tags:
        - eTransfer
      summary: "Required answer for eTransfer sent to this broker"
      description: "A code unique to the user that is required on all eTransfers sent in to this broker"
      operationId: "eTransferInCode"
      responses:
        405:
          description: "Invalid input"
        200:
          description: The requesters unique eTransfer code.
          schema:
            $ref: "#/definitions/eTransferCodeResponse"
      parameters:
        - in: body
          name: request
          description: "Signed timestamp message"
          required: true
          schema:
            $ref: "#/definitions/SignedMessage"

  #############################################################

  /bills/payment:
    post:
      tags:
        - Bill Payments
      summary: "Bill Payment"
      description: "Called by the client to pay a bill with coin via a certified transfer"
      operationId: "billPayment"
      responses:
        405:
          description: "Invalid input"
        200:
          description: The response confirms to the user the order has been processed
          schema:
            $ref: "#/definitions/CertifiedTransferResponse"
      parameters:
        - in: body
          name: request
          description: "Must contain a transfer to this brokers address, and an encrypted BillPayeePacket"
          required: true
          schema:
            $ref: "#/definitions/CertifiedTransfer"

  #############################################################

  /transfer:
    post:
      tags:
        - Transfer
      summary: "Transfer to another The Coin account"
      description: "A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether"
      operationId: "transfer"
      parameters:
        - in: body
          name: request
          description: "A request appropriately filled out and signed as described in the comments"
          required: true
          schema:
            $ref: "#/definitions/CertifiedTransferRequest"
      responses:
        405:
          description: "Invalid input"
        200:
          description: The response confirms to the user the order transfer is valid and has been initiated
          schema:
            $ref: "#/definitions/CertifiedTransferResponse"

  #############################################################

  /secure/google:
    get:
      tags:
        - Secure
      summary: "Get the authorization URL to redirect the user to"
      operationId: "googleAuthUrl"
      responses:
        200:
          description: Google authorization URL
          schema:
            $ref: "#/definitions/GoogleAuthUrl"

  /secure/google/list:
    put:
      tags:
        - Secure
      summary: "Get the listing of available accounts"
      operationId: "googleList"
      parameters:
        - in: body
          name: token
          required: true
          schema:
            $ref: "#/definitions/GoogleToken"
      responses:
        405:
          description: "Permission Denied"
        200:
          description: Account successfully stored
          schema:
            $ref: "#/definitions/GoogleListResult"

  /secure/google/put:
    put:
      tags:
        - Secure
      summary: "Store on google drive"
      operationId: "googlePut"
      parameters:
        - in: body
          name: uploadPacket
          required: true
          schema:
            $ref: "#/definitions/GoogleStoreAccount"
      responses:
        405:
          description: "Permission Denied"
        200:
          description: Account successfully stored
          schema:
            $ref: "#/definitions/BoolResponse"

  /secure/google/get:
    put:
      tags:
        - Secure
      summary: "Retrieve previously-stored file from google drive"
      operationId: "googleRetrieve"
      parameters:
        - in: body
          name: token
          required: true
          schema:
            $ref: "#/definitions/GoogleToken"
      responses:
        405:
          description: "Permission Denied"
        200:
          description: Account successfully stored
          schema:
            $ref: "#/definitions/GoogleGetResult"

  #############################################################
  /newsletter/signup:
    put:
      tags:
        - Newsletter
      summary: "Register an email address for our newsletter."
      operationId: "newsletterSignup"
      parameters:
        - in: body
          name: details
          required: true
          schema:
            $ref: "#/definitions/SubscriptionDetails"
      responses:
        500:
          description: "Server Error"
        200:
          description: Email successfully registered
          schema:
            $ref: "#/definitions/BoolResponse"

  /newsletter/confirm:
    put:
      tags:
        - Newsletter
      summary: "Confirm email subscription."
      operationId: "newsletterConfirm"
      parameters:
        - in: body
          name: details
          required: true
          schema:
            $ref: "#/definitions/SubscriptionDetails"
      responses:
        400:
          description: "Not Found"
        500:
          description: "Server Error"
        200:
          description: If found, returns new details merged with existing
          schema:
            $ref: "#/definitions/SubscriptionDetails"

  /newsletter/details:
    get:
      tags:
        - Newsletter
      summary: "Get subscription details."
      operationId: "newsletterDetails"
      parameters:
        - in: query
          name: id
          required: true
          type: string
      responses:
        400:
          description: "Not Found"
        500:
          description: "Server Error"
        200:
          description: If found, returns subscription details
          schema:
            $ref: "#/definitions/SubscriptionDetails"

  /newsletter/unsubscribe:
    get:
      tags:
        - Newsletter
      summary: "Unsubscribe an email address from our newsletter."
      operationId: "newsletterUnsubscribe"
      parameters:
        - in: query
          name: id
          required: true
          type: string
      responses:
        400:
          description: "Not Found"
        500:
          description: "Server Error"
        200:
          description: Email successfully registered
          schema:
            $ref: "#/definitions/BoolResponse"



