// tslint:disable
/**
 * THE Coin Broker Sample
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: stephen.taylor.dev@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BillPayeePacket
 */
export interface BillPayeePacket {
    /**
     * 
     * @type {string}
     * @memberof BillPayeePacket
     */
    payee?: string;
    /**
     * 
     * @type {string}
     * @memberof BillPayeePacket
     */
    accountNumber?: string;
}
/**
 * 
 * @export
 * @interface BrokerStatus
 */
export interface BrokerStatus {
    /**
     * 
     * @type {string}
     * @memberof BrokerStatus
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof BrokerStatus
     */
    certifiedFee: number;
}
/**
 * 
 * @export
 * @interface CertifiedTransfer
 */
export interface CertifiedTransfer {
    /**
     * 
     * @type {CertifiedTransferRequest}
     * @memberof CertifiedTransfer
     */
    transfer: CertifiedTransferRequest;
    /**
     * 
     * @type {EncryptedPacket}
     * @memberof CertifiedTransfer
     */
    instructionPacket: EncryptedPacket;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransfer
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface CertifiedTransferRequest
 */
export interface CertifiedTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    to: string;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    value: number;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    fee: number;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface CertifiedTransferResponse
 */
export interface CertifiedTransferResponse {
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferResponse
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferResponse
     */
    txHash: string;
}
/**
 * 
 * @export
 * @interface ETransferCodeResponse
 */
export interface ETransferCodeResponse {
    /**
     * 
     * @type {string}
     * @memberof ETransferCodeResponse
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ETransferCodeResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface ETransferPacket
 */
export interface ETransferPacket {
    /**
     * 
     * @type {string}
     * @memberof ETransferPacket
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ETransferPacket
     */
    question: string;
    /**
     * 
     * @type {string}
     * @memberof ETransferPacket
     */
    answer: string;
    /**
     * 
     * @type {string}
     * @memberof ETransferPacket
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface EncryptedPacket
 */
export interface EncryptedPacket {
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    encryptedPacket: string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    version: string;
}
/**
 * 
 * @export
 * @interface GoogleAuthUrl
 */
export interface GoogleAuthUrl {
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthUrl
     */
    url: string;
}
/**
 * 
 * @export
 * @interface GoogleFileIdent
 */
export interface GoogleFileIdent {
    /**
     * 
     * @type {string}
     * @memberof GoogleFileIdent
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleFileIdent
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleFileIdent
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface GoogleGetResult
 */
export interface GoogleGetResult {
    /**
     * 
     * @type {Array<GoogleWalletItem>}
     * @memberof GoogleGetResult
     */
    wallets: Array<GoogleWalletItem>;
}
/**
 * 
 * @export
 * @interface GoogleListResult
 */
export interface GoogleListResult {
    /**
     * 
     * @type {Array<GoogleFileIdent>}
     * @memberof GoogleListResult
     */
    wallets: Array<GoogleFileIdent>;
}
/**
 * 
 * @export
 * @interface GoogleStoreAccount
 */
export interface GoogleStoreAccount {
    /**
     * 
     * @type {GoogleToken}
     * @memberof GoogleStoreAccount
     */
    token: GoogleToken;
    /**
     * 
     * @type {string}
     * @memberof GoogleStoreAccount
     */
    wallet: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleStoreAccount
     */
    walletName: string;
}
/**
 * 
 * @export
 * @interface GoogleToken
 */
export interface GoogleToken {
    /**
     * 
     * @type {string}
     * @memberof GoogleToken
     */
    token: string;
}
/**
 * 
 * @export
 * @interface GoogleWalletItem
 */
export interface GoogleWalletItem {
    /**
     * 
     * @type {GoogleFileIdent}
     * @memberof GoogleWalletItem
     */
    id: GoogleFileIdent;
    /**
     * 
     * @type {string}
     * @memberof GoogleWalletItem
     */
    wallet?: string;
}
/**
 * 
 * @export
 * @interface NewAccountReferal
 */
export interface NewAccountReferal {
    /**
     * 
     * @type {string}
     * @memberof NewAccountReferal
     */
    referrerId: string;
    /**
     * 
     * @type {string}
     * @memberof NewAccountReferal
     */
    newAccount: string;
}
/**
 * 
 * @export
 * @interface SignedMessage
 */
export interface SignedMessage {
    /**
     * 
     * @type {string}
     * @memberof SignedMessage
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof SignedMessage
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface SubscriptionDetails
 */
export interface SubscriptionDetails {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionDetails
     */
    confirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    city?: string;
}

/**
 * BillPaymentsApi - axios parameter creator
 * @export
 */
export const BillPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Called by the client to pay a bill with coin via a certified transfer
         * @summary Bill Payment
         * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted BillPayeePacket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billPayment(request: CertifiedTransfer, options: any = {}): RequestArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling billPayment.');
            }
            const localVarPath = `/bills/payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillPaymentsApi - functional programming interface
 * @export
 */
export const BillPaymentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Called by the client to pay a bill with coin via a certified transfer
         * @summary Bill Payment
         * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted BillPayeePacket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billPayment(request: CertifiedTransfer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedTransferResponse> {
            const localVarAxiosArgs = BillPaymentsApiAxiosParamCreator(configuration).billPayment(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BillPaymentsApi - factory interface
 * @export
 */
export const BillPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Called by the client to pay a bill with coin via a certified transfer
         * @summary Bill Payment
         * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted BillPayeePacket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billPayment(request: CertifiedTransfer, options?: any) {
            return BillPaymentsApiFp(configuration).billPayment(request, options)(axios, basePath);
        },
    };
};

/**
 * BillPaymentsApi - object-oriented interface
 * @export
 * @class BillPaymentsApi
 * @extends {BaseAPI}
 */
export class BillPaymentsApi extends BaseAPI {
    /**
     * Called by the client to pay a bill with coin via a certified transfer
     * @summary Bill Payment
     * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted BillPayeePacket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillPaymentsApi
     */
    public billPayment(request: CertifiedTransfer, options?: any) {
        return BillPaymentsApiFp(this.configuration).billPayment(request, options)(this.axios, this.basePath);
    }

}


/**
 * ETransferApi - axios parameter creator
 * @export
 */
export const ETransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Called by the client to exchange coin for CAD and send via eTransfer
         * @summary Request eTransfer
         * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted ETransferPacket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransfer(request: CertifiedTransfer, options: any = {}): RequestArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling eTransfer.');
            }
            const localVarPath = `/exchange/eTransfer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A code unique to the user that is required on all eTransfers sent in to this broker
         * @summary Required answer for eTransfer sent to this broker
         * @param {SignedMessage} request Signed timestamp message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransferInCode(request: SignedMessage, options: any = {}): RequestArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling eTransferInCode.');
            }
            const localVarPath = `/exchange/eTransfer/code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ETransferApi - functional programming interface
 * @export
 */
export const ETransferApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Called by the client to exchange coin for CAD and send via eTransfer
         * @summary Request eTransfer
         * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted ETransferPacket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransfer(request: CertifiedTransfer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedTransferResponse> {
            const localVarAxiosArgs = ETransferApiAxiosParamCreator(configuration).eTransfer(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * A code unique to the user that is required on all eTransfers sent in to this broker
         * @summary Required answer for eTransfer sent to this broker
         * @param {SignedMessage} request Signed timestamp message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransferInCode(request: SignedMessage, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETransferCodeResponse> {
            const localVarAxiosArgs = ETransferApiAxiosParamCreator(configuration).eTransferInCode(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ETransferApi - factory interface
 * @export
 */
export const ETransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Called by the client to exchange coin for CAD and send via eTransfer
         * @summary Request eTransfer
         * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted ETransferPacket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransfer(request: CertifiedTransfer, options?: any) {
            return ETransferApiFp(configuration).eTransfer(request, options)(axios, basePath);
        },
        /**
         * A code unique to the user that is required on all eTransfers sent in to this broker
         * @summary Required answer for eTransfer sent to this broker
         * @param {SignedMessage} request Signed timestamp message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransferInCode(request: SignedMessage, options?: any) {
            return ETransferApiFp(configuration).eTransferInCode(request, options)(axios, basePath);
        },
    };
};

/**
 * ETransferApi - object-oriented interface
 * @export
 * @class ETransferApi
 * @extends {BaseAPI}
 */
export class ETransferApi extends BaseAPI {
    /**
     * Called by the client to exchange coin for CAD and send via eTransfer
     * @summary Request eTransfer
     * @param {CertifiedTransfer} request Must contain a transfer to this brokers address, and an encrypted ETransferPacket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ETransferApi
     */
    public eTransfer(request: CertifiedTransfer, options?: any) {
        return ETransferApiFp(this.configuration).eTransfer(request, options)(this.axios, this.basePath);
    }

    /**
     * A code unique to the user that is required on all eTransfers sent in to this broker
     * @summary Required answer for eTransfer sent to this broker
     * @param {SignedMessage} request Signed timestamp message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ETransferApi
     */
    public eTransferInCode(request: SignedMessage, options?: any) {
        return ETransferApiFp(this.configuration).eTransferInCode(request, options)(this.axios, this.basePath);
    }

}


/**
 * NewsletterApi - axios parameter creator
 * @export
 */
export const NewsletterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm email subscription.
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterConfirm(details: SubscriptionDetails, options: any = {}): RequestArgs {
            // verify required parameter 'details' is not null or undefined
            if (details === null || details === undefined) {
                throw new RequiredError('details','Required parameter details was null or undefined when calling newsletterConfirm.');
            }
            const localVarPath = `/newsletter/confirm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof details !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(details !== undefined ? details : {}) : (details || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get subscription details.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterDetails(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling newsletterDetails.');
            }
            const localVarPath = `/newsletter/details`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register an email address for our newsletter.
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterSignup(details: SubscriptionDetails, options: any = {}): RequestArgs {
            // verify required parameter 'details' is not null or undefined
            if (details === null || details === undefined) {
                throw new RequiredError('details','Required parameter details was null or undefined when calling newsletterSignup.');
            }
            const localVarPath = `/newsletter/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof details !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(details !== undefined ? details : {}) : (details || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unsubscribe an email address from our newsletter.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUnsubscribe(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling newsletterUnsubscribe.');
            }
            const localVarPath = `/newsletter/unsubscribe`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsletterApi - functional programming interface
 * @export
 */
export const NewsletterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm email subscription.
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterConfirm(details: SubscriptionDetails, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionDetails> {
            const localVarAxiosArgs = NewsletterApiAxiosParamCreator(configuration).newsletterConfirm(details, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get subscription details.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterDetails(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionDetails> {
            const localVarAxiosArgs = NewsletterApiAxiosParamCreator(configuration).newsletterDetails(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register an email address for our newsletter.
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterSignup(details: SubscriptionDetails, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = NewsletterApiAxiosParamCreator(configuration).newsletterSignup(details, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Unsubscribe an email address from our newsletter.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUnsubscribe(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = NewsletterApiAxiosParamCreator(configuration).newsletterUnsubscribe(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NewsletterApi - factory interface
 * @export
 */
export const NewsletterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Confirm email subscription.
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterConfirm(details: SubscriptionDetails, options?: any) {
            return NewsletterApiFp(configuration).newsletterConfirm(details, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get subscription details.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterDetails(id: string, options?: any) {
            return NewsletterApiFp(configuration).newsletterDetails(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register an email address for our newsletter.
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterSignup(details: SubscriptionDetails, options?: any) {
            return NewsletterApiFp(configuration).newsletterSignup(details, options)(axios, basePath);
        },
        /**
         * 
         * @summary Unsubscribe an email address from our newsletter.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUnsubscribe(id: string, options?: any) {
            return NewsletterApiFp(configuration).newsletterUnsubscribe(id, options)(axios, basePath);
        },
    };
};

/**
 * NewsletterApi - object-oriented interface
 * @export
 * @class NewsletterApi
 * @extends {BaseAPI}
 */
export class NewsletterApi extends BaseAPI {
    /**
     * 
     * @summary Confirm email subscription.
     * @param {SubscriptionDetails} details 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterConfirm(details: SubscriptionDetails, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterConfirm(details, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get subscription details.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterDetails(id: string, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterDetails(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register an email address for our newsletter.
     * @param {SubscriptionDetails} details 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterSignup(details: SubscriptionDetails, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterSignup(details, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Unsubscribe an email address from our newsletter.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterUnsubscribe(id: string, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterUnsubscribe(id, options)(this.axios, this.basePath);
    }

}


/**
 * ReferrersApi - axios parameter creator
 * @export
 */
export const ReferrersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Register the referral of new account
         * @param {NewAccountReferal} referral Set referal for new account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(referral: NewAccountReferal, options: any = {}): RequestArgs {
            // verify required parameter 'referral' is not null or undefined
            if (referral === null || referral === undefined) {
                throw new RequiredError('referral','Required parameter referral was null or undefined when calling referralCreate.');
            }
            const localVarPath = `/referrers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof referral !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(referral !== undefined ? referral : {}) : (referral || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Gets the validity of the passed referrer
         * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrer: string, options: any = {}): RequestArgs {
            // verify required parameter 'referrer' is not null or undefined
            if (referrer === null || referrer === undefined) {
                throw new RequiredError('referrer','Required parameter referrer was null or undefined when calling referrerValid.');
            }
            const localVarPath = `/referrers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (referrer !== undefined) {
                localVarQueryParameter['referrer'] = referrer;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferrersApi - functional programming interface
 * @export
 */
export const ReferrersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Register the referral of new account
         * @param {NewAccountReferal} referral Set referal for new account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(referral: NewAccountReferal, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ReferrersApiAxiosParamCreator(configuration).referralCreate(referral, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Gets the validity of the passed referrer
         * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrer: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ReferrersApiAxiosParamCreator(configuration).referrerValid(referrer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReferrersApi - factory interface
 * @export
 */
export const ReferrersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Register the referral of new account
         * @param {NewAccountReferal} referral Set referal for new account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(referral: NewAccountReferal, options?: any) {
            return ReferrersApiFp(configuration).referralCreate(referral, options)(axios, basePath);
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid
         * @summary Gets the validity of the passed referrer
         * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrer: string, options?: any) {
            return ReferrersApiFp(configuration).referrerValid(referrer, options)(axios, basePath);
        },
    };
};

/**
 * ReferrersApi - object-oriented interface
 * @export
 * @class ReferrersApi
 * @extends {BaseAPI}
 */
export class ReferrersApi extends BaseAPI {
    /**
     * Returns a boolean indicating whether the passed referrer is valid
     * @summary Register the referral of new account
     * @param {NewAccountReferal} referral Set referal for new account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferrersApi
     */
    public referralCreate(referral: NewAccountReferal, options?: any) {
        return ReferrersApiFp(this.configuration).referralCreate(referral, options)(this.axios, this.basePath);
    }

    /**
     * Returns a boolean indicating whether the passed referrer is valid
     * @summary Gets the validity of the passed referrer
     * @param {string} referrer Referrers ID.  This ID must have been previously registered with the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferrersApi
     */
    public referrerValid(referrer: string, options?: any) {
        return ReferrersApiFp(this.configuration).referrerValid(referrer, options)(this.axios, this.basePath);
    }

}


/**
 * SecureApi - axios parameter creator
 * @export
 */
export const SecureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the authorization URL to redirect the user to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options: any = {}): RequestArgs {
            const localVarPath = `/secure/google`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the listing of available accounts
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(token: GoogleToken, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling googleList.');
            }
            const localVarPath = `/secure/google/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof token !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(token !== undefined ? token : {}) : (token || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Store on google drive
         * @param {GoogleStoreAccount} uploadPacket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(uploadPacket: GoogleStoreAccount, options: any = {}): RequestArgs {
            // verify required parameter 'uploadPacket' is not null or undefined
            if (uploadPacket === null || uploadPacket === undefined) {
                throw new RequiredError('uploadPacket','Required parameter uploadPacket was null or undefined when calling googlePut.');
            }
            const localVarPath = `/secure/google/put`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof uploadPacket !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uploadPacket !== undefined ? uploadPacket : {}) : (uploadPacket || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve previously-stored file from google drive
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(token: GoogleToken, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling googleRetrieve.');
            }
            const localVarPath = `/secure/google/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof token !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(token !== undefined ? token : {}) : (token || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecureApi - functional programming interface
 * @export
 */
export const SecureApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the authorization URL to redirect the user to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleAuthUrl> {
            const localVarAxiosArgs = SecureApiAxiosParamCreator(configuration).googleAuthUrl(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the listing of available accounts
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(token: GoogleToken, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleListResult> {
            const localVarAxiosArgs = SecureApiAxiosParamCreator(configuration).googleList(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Store on google drive
         * @param {GoogleStoreAccount} uploadPacket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(uploadPacket: GoogleStoreAccount, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = SecureApiAxiosParamCreator(configuration).googlePut(uploadPacket, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve previously-stored file from google drive
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(token: GoogleToken, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleGetResult> {
            const localVarAxiosArgs = SecureApiAxiosParamCreator(configuration).googleRetrieve(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SecureApi - factory interface
 * @export
 */
export const SecureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get the authorization URL to redirect the user to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options?: any) {
            return SecureApiFp(configuration).googleAuthUrl(options)(axios, basePath);
        },
        /**
         * 
         * @summary Get the listing of available accounts
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(token: GoogleToken, options?: any) {
            return SecureApiFp(configuration).googleList(token, options)(axios, basePath);
        },
        /**
         * 
         * @summary Store on google drive
         * @param {GoogleStoreAccount} uploadPacket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(uploadPacket: GoogleStoreAccount, options?: any) {
            return SecureApiFp(configuration).googlePut(uploadPacket, options)(axios, basePath);
        },
        /**
         * 
         * @summary Retrieve previously-stored file from google drive
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(token: GoogleToken, options?: any) {
            return SecureApiFp(configuration).googleRetrieve(token, options)(axios, basePath);
        },
    };
};

/**
 * SecureApi - object-oriented interface
 * @export
 * @class SecureApi
 * @extends {BaseAPI}
 */
export class SecureApi extends BaseAPI {
    /**
     * 
     * @summary Get the authorization URL to redirect the user to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleAuthUrl(options?: any) {
        return SecureApiFp(this.configuration).googleAuthUrl(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get the listing of available accounts
     * @param {GoogleToken} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleList(token: GoogleToken, options?: any) {
        return SecureApiFp(this.configuration).googleList(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Store on google drive
     * @param {GoogleStoreAccount} uploadPacket 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googlePut(uploadPacket: GoogleStoreAccount, options?: any) {
        return SecureApiFp(this.configuration).googlePut(uploadPacket, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Retrieve previously-stored file from google drive
     * @param {GoogleToken} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleRetrieve(token: GoogleToken, options?: any) {
        return SecureApiFp(this.configuration).googleRetrieve(token, options)(this.axios, this.basePath);
    }

}


/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?)
         * @summary Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options: any = {}): RequestArgs {
            const localVarPath = `/status`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?)
         * @summary Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerStatus> {
            const localVarAxiosArgs = StatusApiAxiosParamCreator(configuration).status(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?)
         * @summary Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: any) {
            return StatusApiFp(configuration).status(options)(axios, basePath);
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * Returns info like brokers address, available balance, etc (?)
     * @summary Gets the operating status of the broker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public status(options?: any) {
        return StatusApiFp(this.configuration).status(options)(this.axios, this.basePath);
    }

}


/**
 * TransferApi - axios parameter creator
 * @export
 */
export const TransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
         * @summary Transfer to another The Coin account
         * @param {CertifiedTransferRequest} request A request appropriately filled out and signed as described in the comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(request: CertifiedTransferRequest, options: any = {}): RequestArgs {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling transfer.');
            }
            const localVarPath = `/transfer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransferApi - functional programming interface
 * @export
 */
export const TransferApiFp = function(configuration?: Configuration) {
    return {
        /**
         * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
         * @summary Transfer to another The Coin account
         * @param {CertifiedTransferRequest} request A request appropriately filled out and signed as described in the comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(request: CertifiedTransferRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedTransferResponse> {
            const localVarAxiosArgs = TransferApiAxiosParamCreator(configuration).transfer(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TransferApi - factory interface
 * @export
 */
export const TransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
         * @summary Transfer to another The Coin account
         * @param {CertifiedTransferRequest} request A request appropriately filled out and signed as described in the comments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(request: CertifiedTransferRequest, options?: any) {
            return TransferApiFp(configuration).transfer(request, options)(axios, basePath);
        },
    };
};

/**
 * TransferApi - object-oriented interface
 * @export
 * @class TransferApi
 * @extends {BaseAPI}
 */
export class TransferApi extends BaseAPI {
    /**
     * A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether
     * @summary Transfer to another The Coin account
     * @param {CertifiedTransferRequest} request A request appropriately filled out and signed as described in the comments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransferApi
     */
    public transfer(request: CertifiedTransferRequest, options?: any) {
        return TransferApiFp(this.configuration).transfer(request, options)(this.axios, this.basePath);
    }

}


