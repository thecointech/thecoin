/* tslint:disable */
/* eslint-disable */
/**
 * @thecointech/broker-service
 * TheCoin simple broker services.  This sample API is an example of how to setup the simplest low-volume exchange, when combined with the included server code, without external dependencies
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: stephen@thecoin.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BoolResponse
 */
export interface BoolResponse {
    /**
     * 
     * @type {boolean}
     * @memberof BoolResponse
     */
    success: boolean;
}
/**
 * 
 * @export
 * @interface CertifiedTransfer
 */
export interface CertifiedTransfer {
    /**
     * 
     * @type {CertifiedTransferRequest}
     * @memberof CertifiedTransfer
     */
    transfer: CertifiedTransferRequest;
    /**
     * 
     * @type {EncryptedPacket}
     * @memberof CertifiedTransfer
     */
    instructionPacket: EncryptedPacket;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransfer
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface CertifiedTransferRequest
 */
export interface CertifiedTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    to: string;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    value: number;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    fee: number;
    /**
     * 
     * @type {number}
     * @memberof CertifiedTransferRequest
     */
    timestamp: number;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferRequest
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface CertifiedTransferResponse
 */
export interface CertifiedTransferResponse {
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferResponse
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof CertifiedTransferResponse
     */
    txHash: string;
}
/**
 * 
 * @export
 * @interface ETransferCodeResponse
 */
export interface ETransferCodeResponse {
    /**
     * 
     * @type {string}
     * @memberof ETransferCodeResponse
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ETransferCodeResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface EncryptedPacket
 */
export interface EncryptedPacket {
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    encryptedPacket: string;
    /**
     * 
     * @type {string}
     * @memberof EncryptedPacket
     */
    version: string;
}
/**
 * 
 * @export
 * @interface GoogleAuthUrl
 */
export interface GoogleAuthUrl {
    /**
     * 
     * @type {string}
     * @memberof GoogleAuthUrl
     */
    url: string;
}
/**
 * 
 * @export
 * @interface GoogleFileIdent
 */
export interface GoogleFileIdent {
    /**
     * 
     * @type {string}
     * @memberof GoogleFileIdent
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleFileIdent
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleFileIdent
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface GoogleGetResult
 */
export interface GoogleGetResult {
    /**
     * 
     * @type {Array<GoogleWalletItem>}
     * @memberof GoogleGetResult
     */
    wallets: Array<GoogleWalletItem>;
}
/**
 * 
 * @export
 * @interface GoogleListResult
 */
export interface GoogleListResult {
    /**
     * 
     * @type {Array<GoogleFileIdent>}
     * @memberof GoogleListResult
     */
    wallets: Array<GoogleFileIdent>;
}
/**
 * 
 * @export
 * @interface GoogleStoreAccount
 */
export interface GoogleStoreAccount {
    /**
     * 
     * @type {GoogleToken}
     * @memberof GoogleStoreAccount
     */
    token: GoogleToken;
    /**
     * 
     * @type {string}
     * @memberof GoogleStoreAccount
     */
    wallet: string;
    /**
     * 
     * @type {string}
     * @memberof GoogleStoreAccount
     */
    walletName: string;
}
/**
 * 
 * @export
 * @interface GoogleToken
 */
export interface GoogleToken {
    /**
     * 
     * @type {string}
     * @memberof GoogleToken
     */
    token: string;
}
/**
 * 
 * @export
 * @interface GoogleWalletItem
 */
export interface GoogleWalletItem {
    /**
     * 
     * @type {GoogleFileIdent}
     * @memberof GoogleWalletItem
     */
    id: GoogleFileIdent;
    /**
     * 
     * @type {string}
     * @memberof GoogleWalletItem
     */
    wallet?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    certifiedFee: number;
}
/**
 * 
 * @export
 * @interface NewAccountReferal
 */
export interface NewAccountReferal {
    /**
     * 
     * @type {string}
     * @memberof NewAccountReferal
     */
    referrerId: string;
    /**
     * 
     * @type {string}
     * @memberof NewAccountReferal
     */
    newAccount: string;
}
/**
 * This file was auto-generated by swagger-to-ts. Do not make direct changes to the file.
 * @export
 * @interface SignedMessage
 */
export interface SignedMessage {
    /**
     * 
     * @type {string}
     * @memberof SignedMessage
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof SignedMessage
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface SubscriptionDetails
 */
export interface SubscriptionDetails {
    /**
     * The email the user used to register his account
     * @type {string}
     * @memberof SubscriptionDetails
     */
    email: string;
    /**
     * Opt-in confirmation of the users subscription
     * @type {boolean}
     * @memberof SubscriptionDetails
     */
    confirmed?: boolean;
    /**
     * Optional name
     * @type {string}
     * @memberof SubscriptionDetails
     */
    givenName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    familyName?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionDetails
     */
    city?: string;
}

/**
 * BillPaymentsApi - axios parameter creator
 * @export
 */
export const BillPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Bill Payment Called by the client to pay a bill with coin via a certified transfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket returns CertifiedTransferResponse
         * @param {CertifiedTransfer} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billPayment: async (request: CertifiedTransfer, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('billPayment', 'request', request)
            const localVarPath = `/bills/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillPaymentsApi - functional programming interface
 * @export
 */
export const BillPaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BillPaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Bill Payment Called by the client to pay a bill with coin via a certified transfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket returns CertifiedTransferResponse
         * @param {CertifiedTransfer} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async billPayment(request: CertifiedTransfer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedTransferResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.billPayment(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BillPaymentsApi - factory interface
 * @export
 */
export const BillPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BillPaymentsApiFp(configuration)
    return {
        /**
         * Bill Payment Called by the client to pay a bill with coin via a certified transfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket returns CertifiedTransferResponse
         * @param {CertifiedTransfer} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billPayment(request: CertifiedTransfer, options?: any): AxiosPromise<CertifiedTransferResponse> {
            return localVarFp.billPayment(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillPaymentsApi - object-oriented interface
 * @export
 * @class BillPaymentsApi
 * @extends {BaseAPI}
 */
export class BillPaymentsApi extends BaseAPI {
    /**
     * Bill Payment Called by the client to pay a bill with coin via a certified transfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted BillPayeePacket returns CertifiedTransferResponse
     * @param {CertifiedTransfer} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillPaymentsApi
     */
    public billPayment(request: CertifiedTransfer, options?: any) {
        return BillPaymentsApiFp(this.configuration).billPayment(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DirectTransferApi - axios parameter creator
 * @export
 */
export const DirectTransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Transfer to another The Coin account A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether  request CertifiedTransferRequest A request appropriately filled out and signed as described in the comments returns CertifiedTransferResponse
         * @param {CertifiedTransferRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer: async (request: CertifiedTransferRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('transfer', 'request', request)
            const localVarPath = `/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DirectTransferApi - functional programming interface
 * @export
 */
export const DirectTransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DirectTransferApiAxiosParamCreator(configuration)
    return {
        /**
         * Transfer to another The Coin account A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether  request CertifiedTransferRequest A request appropriately filled out and signed as described in the comments returns CertifiedTransferResponse
         * @param {CertifiedTransferRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transfer(request: CertifiedTransferRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedTransferResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transfer(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DirectTransferApi - factory interface
 * @export
 */
export const DirectTransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DirectTransferApiFp(configuration)
    return {
        /**
         * Transfer to another The Coin account A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether  request CertifiedTransferRequest A request appropriately filled out and signed as described in the comments returns CertifiedTransferResponse
         * @param {CertifiedTransferRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(request: CertifiedTransferRequest, options?: any): AxiosPromise<CertifiedTransferResponse> {
            return localVarFp.transfer(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DirectTransferApi - object-oriented interface
 * @export
 * @class DirectTransferApi
 * @extends {BaseAPI}
 */
export class DirectTransferApi extends BaseAPI {
    /**
     * Transfer to another The Coin account A client may request that the Broker initiate a transfer from their account to another.  The transfer includes a fee paid to the broker to cover the cost of the transfer.  This allows a user to operate on the Ethereum blockchain without requiring their own ether  request CertifiedTransferRequest A request appropriately filled out and signed as described in the comments returns CertifiedTransferResponse
     * @param {CertifiedTransferRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DirectTransferApi
     */
    public transfer(request: CertifiedTransferRequest, options?: any) {
        return DirectTransferApiFp(this.configuration).transfer(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ETransferApi - axios parameter creator
 * @export
 */
export const ETransferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Request eTransfer Called by the client to exchange coin for CAD and send via eTransfer  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted ETransferPacket returns CertifiedTransferResponse
         * @param {CertifiedTransfer} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransfer: async (request: CertifiedTransfer, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('eTransfer', 'request', request)
            const localVarPath = `/etransfer/eTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Required answer for eTransfer sent to this broker A code unique to the user that is required on all eTransfers sent in to this broker  request SignedMessage Signed timestamp message returns ETransferCodeResponse
         * @param {SignedMessage} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransferInCode: async (request: SignedMessage, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('eTransferInCode', 'request', request)
            const localVarPath = `/etransfer/eTransfer/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ETransferApi - functional programming interface
 * @export
 */
export const ETransferApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ETransferApiAxiosParamCreator(configuration)
    return {
        /**
         * Request eTransfer Called by the client to exchange coin for CAD and send via eTransfer  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted ETransferPacket returns CertifiedTransferResponse
         * @param {CertifiedTransfer} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eTransfer(request: CertifiedTransfer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertifiedTransferResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eTransfer(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Required answer for eTransfer sent to this broker A code unique to the user that is required on all eTransfers sent in to this broker  request SignedMessage Signed timestamp message returns ETransferCodeResponse
         * @param {SignedMessage} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eTransferInCode(request: SignedMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETransferCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eTransferInCode(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ETransferApi - factory interface
 * @export
 */
export const ETransferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ETransferApiFp(configuration)
    return {
        /**
         * Request eTransfer Called by the client to exchange coin for CAD and send via eTransfer  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted ETransferPacket returns CertifiedTransferResponse
         * @param {CertifiedTransfer} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransfer(request: CertifiedTransfer, options?: any): AxiosPromise<CertifiedTransferResponse> {
            return localVarFp.eTransfer(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Required answer for eTransfer sent to this broker A code unique to the user that is required on all eTransfers sent in to this broker  request SignedMessage Signed timestamp message returns ETransferCodeResponse
         * @param {SignedMessage} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eTransferInCode(request: SignedMessage, options?: any): AxiosPromise<ETransferCodeResponse> {
            return localVarFp.eTransferInCode(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ETransferApi - object-oriented interface
 * @export
 * @class ETransferApi
 * @extends {BaseAPI}
 */
export class ETransferApi extends BaseAPI {
    /**
     * Request eTransfer Called by the client to exchange coin for CAD and send via eTransfer  request CertifiedTransfer Must contain a transfer to this brokers address, and an encrypted ETransferPacket returns CertifiedTransferResponse
     * @param {CertifiedTransfer} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ETransferApi
     */
    public eTransfer(request: CertifiedTransfer, options?: any) {
        return ETransferApiFp(this.configuration).eTransfer(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Required answer for eTransfer sent to this broker A code unique to the user that is required on all eTransfers sent in to this broker  request SignedMessage Signed timestamp message returns ETransferCodeResponse
     * @param {SignedMessage} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ETransferApi
     */
    public eTransferInCode(request: SignedMessage, options?: any) {
        return ETransferApiFp(this.configuration).eTransferInCode(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NewsletterApi - axios parameter creator
 * @export
 */
export const NewsletterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get subscription details.  id String returns SubscriptionDetails
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterDetails: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('newsletterDetails', 'id', id)
            const localVarPath = `/newsletter/details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register an email address for our newsletter.
         * @param {string} email SubscriptionDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterSignup: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('newsletterSignup', 'email', email)
            const localVarPath = `/newsletter/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unsubscribe an email address from our newsletter.  id String returns BoolResponse
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUnsubscribe: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('newsletterUnsubscribe', 'id', id)
            const localVarPath = `/newsletter/unsubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update email subscription.  Also used to confirm  details SubscriptionDetails returns BoolResponse
         * @param {string} id 
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUpdate: async (id: string, details: SubscriptionDetails, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('newsletterUpdate', 'id', id)
            // verify required parameter 'details' is not null or undefined
            assertParamExists('newsletterUpdate', 'details', details)
            const localVarPath = `/newsletter/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(details, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsletterApi - functional programming interface
 * @export
 */
export const NewsletterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsletterApiAxiosParamCreator(configuration)
    return {
        /**
         * Get subscription details.  id String returns SubscriptionDetails
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsletterDetails(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsletterDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register an email address for our newsletter.
         * @param {string} email SubscriptionDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsletterSignup(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsletterSignup(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unsubscribe an email address from our newsletter.  id String returns BoolResponse
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsletterUnsubscribe(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsletterUnsubscribe(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update email subscription.  Also used to confirm  details SubscriptionDetails returns BoolResponse
         * @param {string} id 
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsletterUpdate(id: string, details: SubscriptionDetails, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsletterUpdate(id, details, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsletterApi - factory interface
 * @export
 */
export const NewsletterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsletterApiFp(configuration)
    return {
        /**
         * Get subscription details.  id String returns SubscriptionDetails
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterDetails(id: string, options?: any): AxiosPromise<SubscriptionDetails> {
            return localVarFp.newsletterDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Register an email address for our newsletter.
         * @param {string} email SubscriptionDetails
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterSignup(email: string, options?: any): AxiosPromise<BoolResponse> {
            return localVarFp.newsletterSignup(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Unsubscribe an email address from our newsletter.  id String returns BoolResponse
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUnsubscribe(id: string, options?: any): AxiosPromise<BoolResponse> {
            return localVarFp.newsletterUnsubscribe(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update email subscription.  Also used to confirm  details SubscriptionDetails returns BoolResponse
         * @param {string} id 
         * @param {SubscriptionDetails} details 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsletterUpdate(id: string, details: SubscriptionDetails, options?: any): AxiosPromise<SubscriptionDetails> {
            return localVarFp.newsletterUpdate(id, details, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsletterApi - object-oriented interface
 * @export
 * @class NewsletterApi
 * @extends {BaseAPI}
 */
export class NewsletterApi extends BaseAPI {
    /**
     * Get subscription details.  id String returns SubscriptionDetails
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterDetails(id: string, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register an email address for our newsletter.
     * @param {string} email SubscriptionDetails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterSignup(email: string, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterSignup(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unsubscribe an email address from our newsletter.  id String returns BoolResponse
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterUnsubscribe(id: string, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterUnsubscribe(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update email subscription.  Also used to confirm  details SubscriptionDetails returns BoolResponse
     * @param {string} id 
     * @param {SubscriptionDetails} details 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newsletterUpdate(id: string, details: SubscriptionDetails, options?: any) {
        return NewsletterApiFp(this.configuration).newsletterUpdate(id, details, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReferralsApi - axios parameter creator
 * @export
 */
export const ReferralsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Set referal for new account  NewAccountReferal: This referral must have been previously registered with the system
         * @param {NewAccountReferal} referral 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate: async (referral: NewAccountReferal, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'referral' is not null or undefined
            assertParamExists('referralCreate', 'referral', referral)
            const localVarPath = `/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(referral, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid  Referrers ID: This ID must have been previously registered with the system
         * @param {string} referrerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid: async (referrerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'referrerId' is not null or undefined
            assertParamExists('referrerValid', 'referrerId', referrerId)
            const localVarPath = `/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (referrerId !== undefined) {
                localVarQueryParameter['referrerId'] = referrerId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralsApi - functional programming interface
 * @export
 */
export const ReferralsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferralsApiAxiosParamCreator(configuration)
    return {
        /**
         * Set referal for new account  NewAccountReferal: This referral must have been previously registered with the system
         * @param {NewAccountReferal} referral 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referralCreate(referral: NewAccountReferal, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referralCreate(referral, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid  Referrers ID: This ID must have been previously registered with the system
         * @param {string} referrerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referrerValid(referrerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referrerValid(referrerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferralsApi - factory interface
 * @export
 */
export const ReferralsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferralsApiFp(configuration)
    return {
        /**
         * Set referal for new account  NewAccountReferal: This referral must have been previously registered with the system
         * @param {NewAccountReferal} referral 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referralCreate(referral: NewAccountReferal, options?: any): AxiosPromise<BoolResponse> {
            return localVarFp.referralCreate(referral, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a boolean indicating whether the passed referrer is valid  Referrers ID: This ID must have been previously registered with the system
         * @param {string} referrerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referrerValid(referrerId: string, options?: any): AxiosPromise<BoolResponse> {
            return localVarFp.referrerValid(referrerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
export class ReferralsApi extends BaseAPI {
    /**
     * Set referal for new account  NewAccountReferal: This referral must have been previously registered with the system
     * @param {NewAccountReferal} referral 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public referralCreate(referral: NewAccountReferal, options?: any) {
        return ReferralsApiFp(this.configuration).referralCreate(referral, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a boolean indicating whether the passed referrer is valid  Referrers ID: This ID must have been previously registered with the system
     * @param {string} referrerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public referrerValid(referrerId: string, options?: any) {
        return ReferralsApiFp(this.configuration).referrerValid(referrerId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecureApi - axios parameter creator
 * @export
 */
export const SecureApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the authorization URL to redirect the user to  returns GoogleAuthUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/secure/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the listing of available accounts  token GoogleToken returns GoogleListResult
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList: async (token: GoogleToken, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('googleList', 'token', token)
            const localVarPath = `/secure/google/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(token, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store on google drive  account GoogleUploadPacket returns BoolResponse
         * @param {GoogleStoreAccount} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut: async (account: GoogleStoreAccount, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('googlePut', 'account', account)
            const localVarPath = `/secure/google/put`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve previously-stored file from google drive  token GoogleToken returns GoogleGetResult
         * @param {GoogleToken} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve: async (request: GoogleToken, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('googleRetrieve', 'request', request)
            const localVarPath = `/secure/google/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecureApi - functional programming interface
 * @export
 */
export const SecureApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecureApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the authorization URL to redirect the user to  returns GoogleAuthUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleAuthUrl(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleAuthUrl>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleAuthUrl(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the listing of available accounts  token GoogleToken returns GoogleListResult
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleList(token: GoogleToken, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleList(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Store on google drive  account GoogleUploadPacket returns BoolResponse
         * @param {GoogleStoreAccount} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googlePut(account: GoogleStoreAccount, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoolResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googlePut(account, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve previously-stored file from google drive  token GoogleToken returns GoogleGetResult
         * @param {GoogleToken} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async googleRetrieve(request: GoogleToken, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoogleGetResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.googleRetrieve(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecureApi - factory interface
 * @export
 */
export const SecureApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecureApiFp(configuration)
    return {
        /**
         * Get the authorization URL to redirect the user to  returns GoogleAuthUrl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleAuthUrl(options?: any): AxiosPromise<GoogleAuthUrl> {
            return localVarFp.googleAuthUrl(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the listing of available accounts  token GoogleToken returns GoogleListResult
         * @param {GoogleToken} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleList(token: GoogleToken, options?: any): AxiosPromise<GoogleListResult> {
            return localVarFp.googleList(token, options).then((request) => request(axios, basePath));
        },
        /**
         * Store on google drive  account GoogleUploadPacket returns BoolResponse
         * @param {GoogleStoreAccount} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googlePut(account: GoogleStoreAccount, options?: any): AxiosPromise<BoolResponse> {
            return localVarFp.googlePut(account, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve previously-stored file from google drive  token GoogleToken returns GoogleGetResult
         * @param {GoogleToken} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        googleRetrieve(request: GoogleToken, options?: any): AxiosPromise<GoogleGetResult> {
            return localVarFp.googleRetrieve(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecureApi - object-oriented interface
 * @export
 * @class SecureApi
 * @extends {BaseAPI}
 */
export class SecureApi extends BaseAPI {
    /**
     * Get the authorization URL to redirect the user to  returns GoogleAuthUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleAuthUrl(options?: any) {
        return SecureApiFp(this.configuration).googleAuthUrl(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the listing of available accounts  token GoogleToken returns GoogleListResult
     * @param {GoogleToken} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleList(token: GoogleToken, options?: any) {
        return SecureApiFp(this.configuration).googleList(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Store on google drive  account GoogleUploadPacket returns BoolResponse
     * @param {GoogleStoreAccount} account 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googlePut(account: GoogleStoreAccount, options?: any) {
        return SecureApiFp(this.configuration).googlePut(account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve previously-stored file from google drive  token GoogleToken returns GoogleGetResult
     * @param {GoogleToken} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureApi
     */
    public googleRetrieve(request: GoogleToken, options?: any) {
        return SecureApiFp(this.configuration).googleRetrieve(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns info like brokers address, available balance, etc (?) Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns info like brokers address, available balance, etc (?) Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async status(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.status(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatusApiFp(configuration)
    return {
        /**
         * Returns info like brokers address, available balance, etc (?) Gets the operating status of the broker
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.status(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * Returns info like brokers address, available balance, etc (?) Gets the operating status of the broker
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public status(options?: any) {
        return StatusApiFp(this.configuration).status(options).then((request) => request(this.axios, this.basePath));
    }
}


